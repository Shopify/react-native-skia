{"version":3,"names":["_nodes","require","_types","_types2","_utils","_Core","declareShader","ctx","props","source","uniforms","transform","m3","Skia","Matrix","processTransformProps","shader","makeShaderWithChildren","processUniforms","shaders","splice","length","push","declareColorShader","color","Shader","MakeColor","processColor","declareFractalNoiseShader","freqX","freqY","octaves","seed","tileWidth","tileHeight","MakeFractalNoise","declareTwoPointConicalGradientShader","startR","endR","start","end","colors","positions","mode","localMatrix","flags","processGradientProps","MakeTwoPointConicalGradient","declareRadialGradientShader","c","r","MakeRadialGradient","declareSweepGradientShader","MakeSweepGradient","x","y","declareLinearGradientShader","MakeLinearGradient","declareTurbulenceShader","MakeTurbulence","declareImageShader","fit","image","tx","ty","sampling","imageShaderProps","rct","getRect","rects","fitRects","width","height","sx","sy","rect2rect","src","dst","translate","translateX","translateY","scale","scaleX","scaleY","lm","concat","isCubicSampling","makeShaderCubic","TileMode","enumKey","B","C","_sampling$filter","_sampling$mipmap","filter","FilterMode","Linear","mipmap","MipmapMode","None","declareBlend","blend","BlendMode","composer","MakeBlend","bind","composeDeclarations","isPushShader","command","type","CommandType","PushShader","exports","isShader","shaderType","pushShader","NodeType","ImageShader","ColorShader","Turbulence","FractalNoise","LinearGradient","RadialGradient","SweepGradient","TwoPointConicalGradient","Blend","Error"],"sources":["Shaders.ts"],"sourcesContent":["import {\n  enumKey,\n  fitRects,\n  getRect,\n  processColor,\n  processGradientProps,\n  processTransformProps,\n  rect2rect,\n} from \"../../../dom/nodes\";\nimport { NodeType } from \"../../../dom/types\";\nimport type {\n  BlendProps,\n  ColorProps,\n  FractalNoiseProps,\n  ImageShaderProps,\n  LinearGradientProps,\n  RadialGradientProps,\n  ShaderProps,\n  SweepGradientProps,\n  TurbulenceProps,\n  TwoPointConicalGradientProps,\n} from \"../../../dom/types\";\nimport type { SkShader } from \"../../../skia/types\";\nimport {\n  BlendMode,\n  FilterMode,\n  isCubicSampling,\n  MipmapMode,\n  processUniforms,\n  TileMode,\n} from \"../../../skia/types\";\nimport { composeDeclarations } from \"../../utils\";\nimport type { Command } from \"../Core\";\nimport { CommandType } from \"../Core\";\nimport type { DrawingContext } from \"../DrawingContext\";\n\nconst declareShader = (ctx: DrawingContext, props: ShaderProps) => {\n  \"worklet\";\n  const { source, uniforms, ...transform } = props;\n  const m3 = ctx.Skia.Matrix();\n  processTransformProps(m3, transform);\n  const shader = source.makeShaderWithChildren(\n    processUniforms(source, uniforms),\n    ctx.shaders.splice(0, ctx.shaders.length),\n    m3\n  );\n  ctx.shaders.push(shader);\n};\n\nconst declareColorShader = (ctx: DrawingContext, props: ColorProps) => {\n  \"worklet\";\n  const { color } = props;\n  const shader = ctx.Skia.Shader.MakeColor(processColor(ctx.Skia, color));\n  ctx.shaders.push(shader);\n};\n\nconst declareFractalNoiseShader = (\n  ctx: DrawingContext,\n  props: FractalNoiseProps\n) => {\n  \"worklet\";\n  const { freqX, freqY, octaves, seed, tileWidth, tileHeight } = props;\n  const shader = ctx.Skia.Shader.MakeFractalNoise(\n    freqX,\n    freqY,\n    octaves,\n    seed,\n    tileWidth,\n    tileHeight\n  );\n  ctx.shaders.push(shader);\n};\n\nconst declareTwoPointConicalGradientShader = (\n  ctx: DrawingContext,\n  props: TwoPointConicalGradientProps\n) => {\n  \"worklet\";\n  const { startR, endR, start, end } = props;\n  const { colors, positions, mode, localMatrix, flags } = processGradientProps(\n    ctx.Skia,\n    props\n  );\n  const shader = ctx.Skia.Shader.MakeTwoPointConicalGradient(\n    start,\n    startR,\n    end,\n    endR,\n    colors,\n    positions,\n    mode,\n    localMatrix,\n    flags\n  );\n  ctx.shaders.push(shader);\n};\n\nconst declareRadialGradientShader = (\n  ctx: DrawingContext,\n  props: RadialGradientProps\n) => {\n  \"worklet\";\n  const { c, r } = props;\n  const { colors, positions, mode, localMatrix, flags } = processGradientProps(\n    ctx.Skia,\n    props\n  );\n  const shader = ctx.Skia.Shader.MakeRadialGradient(\n    c,\n    r,\n    colors,\n    positions,\n    mode,\n    localMatrix,\n    flags\n  );\n  ctx.shaders.push(shader);\n};\n\nconst declareSweepGradientShader = (\n  ctx: DrawingContext,\n  props: SweepGradientProps\n) => {\n  \"worklet\";\n  const { c, start, end } = props;\n  const { colors, positions, mode, localMatrix, flags } = processGradientProps(\n    ctx.Skia,\n    props\n  );\n  const shader = ctx.Skia.Shader.MakeSweepGradient(\n    c.x,\n    c.y,\n    colors,\n    positions,\n    mode,\n    localMatrix,\n    flags,\n    start,\n    end\n  );\n  ctx.shaders.push(shader);\n};\n\nconst declareLinearGradientShader = (\n  ctx: DrawingContext,\n  props: LinearGradientProps\n) => {\n  \"worklet\";\n  const { start, end } = props;\n  const { colors, positions, mode, localMatrix, flags } = processGradientProps(\n    ctx.Skia,\n    props\n  );\n  const shader = ctx.Skia.Shader.MakeLinearGradient(\n    start,\n    end,\n    colors,\n    positions ?? null,\n    mode,\n    localMatrix,\n    flags\n  );\n  ctx.shaders.push(shader);\n};\n\nconst declareTurbulenceShader = (\n  ctx: DrawingContext,\n  props: TurbulenceProps\n) => {\n  \"worklet\";\n  const { freqX, freqY, octaves, seed, tileWidth, tileHeight } = props;\n  const shader = ctx.Skia.Shader.MakeTurbulence(\n    freqX,\n    freqY,\n    octaves,\n    seed,\n    tileWidth,\n    tileHeight\n  );\n  ctx.shaders.push(shader);\n};\n\nconst declareImageShader = (ctx: DrawingContext, props: ImageShaderProps) => {\n  \"worklet\";\n  const { fit, image, tx, ty, sampling, ...imageShaderProps } = props;\n  if (!image) {\n    return;\n  }\n\n  const rct = getRect(ctx.Skia, imageShaderProps);\n  const m3 = ctx.Skia.Matrix();\n  if (rct) {\n    const rects = fitRects(\n      fit,\n      { x: 0, y: 0, width: image.width(), height: image.height() },\n      rct\n    );\n    const [x, y, sx, sy] = rect2rect(rects.src, rects.dst);\n    m3.translate(x.translateX, y.translateY);\n    m3.scale(sx.scaleX, sy.scaleY);\n  }\n  const lm = ctx.Skia.Matrix();\n  lm.concat(m3);\n  processTransformProps(lm, imageShaderProps);\n  let shader: SkShader;\n  if (sampling && isCubicSampling(sampling)) {\n    shader = image.makeShaderCubic(\n      TileMode[enumKey(tx)],\n      TileMode[enumKey(ty)],\n      sampling.B,\n      sampling.C,\n      lm\n    );\n  } else {\n    shader = image.makeShaderCubic(\n      TileMode[enumKey(tx)],\n      TileMode[enumKey(ty)],\n      sampling?.filter ?? FilterMode.Linear,\n      sampling?.mipmap ?? MipmapMode.None,\n      lm\n    );\n  }\n  ctx.shaders.push(shader);\n};\n\nconst declareBlend = (ctx: DrawingContext, props: BlendProps) => {\n  \"worklet\";\n  const blend = BlendMode[enumKey(props.mode as BlendProps[\"mode\"])];\n  const shaders = ctx.shaders.splice(0, ctx.shaders.length);\n  if (shaders.length > 0) {\n    const composer = ctx.Skia.Shader.MakeBlend.bind(ctx.Skia.Shader, blend);\n    ctx.shaders.push(composeDeclarations(shaders, composer));\n  }\n};\n\nexport const isPushShader = (\n  command: Command\n): command is Command<CommandType.PushShader> => {\n  \"worklet\";\n  return command.type === CommandType.PushShader;\n};\n\ntype Props = {\n  [NodeType.Shader]: ShaderProps;\n  [NodeType.ImageShader]: ImageShaderProps;\n  [NodeType.ColorShader]: ColorProps;\n  [NodeType.Turbulence]: TurbulenceProps;\n  [NodeType.FractalNoise]: FractalNoiseProps;\n  [NodeType.LinearGradient]: LinearGradientProps;\n  [NodeType.RadialGradient]: RadialGradientProps;\n  [NodeType.SweepGradient]: SweepGradientProps;\n  [NodeType.TwoPointConicalGradient]: TwoPointConicalGradientProps;\n  [NodeType.Blend]: BlendProps;\n};\n\ninterface PushShader<T extends keyof Props>\n  extends Command<CommandType.PushShader> {\n  shaderType: T;\n  props: Props[T];\n}\n\nconst isShader = <T extends keyof Props>(\n  command: Command<CommandType.PushShader>,\n  type: T\n): command is PushShader<T> => {\n  \"worklet\";\n  return command.shaderType === type;\n};\n\nexport const pushShader = (\n  ctx: DrawingContext,\n  command: Command<CommandType.PushShader>\n) => {\n  \"worklet\";\n  if (isShader(command, NodeType.Shader)) {\n    declareShader(ctx, command.props);\n  } else if (isShader(command, NodeType.ImageShader)) {\n    declareImageShader(ctx, command.props);\n  } else if (isShader(command, NodeType.ColorShader)) {\n    declareColorShader(ctx, command.props);\n  } else if (isShader(command, NodeType.Turbulence)) {\n    declareTurbulenceShader(ctx, command.props);\n  } else if (isShader(command, NodeType.FractalNoise)) {\n    declareFractalNoiseShader(ctx, command.props);\n  } else if (isShader(command, NodeType.LinearGradient)) {\n    declareLinearGradientShader(ctx, command.props);\n  } else if (isShader(command, NodeType.RadialGradient)) {\n    declareRadialGradientShader(ctx, command.props);\n  } else if (isShader(command, NodeType.SweepGradient)) {\n    declareSweepGradientShader(ctx, command.props);\n  } else if (isShader(command, NodeType.TwoPointConicalGradient)) {\n    declareTwoPointConicalGradientShader(ctx, command.props);\n  } else if (isShader(command, NodeType.Blend)) {\n    declareBlend(ctx, command.props);\n  } else {\n    throw new Error(`Unknown shader type: ${command.shaderType}`);\n  }\n};\n"],"mappings":"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","ignoreList":[]}