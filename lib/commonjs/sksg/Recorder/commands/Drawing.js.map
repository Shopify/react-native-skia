{"version":3,"names":["_nodes","require","_processors","_types","drawLine","ctx","props","p1","p2","canvas","x","y","paint","exports","drawOval","rect","processRect","Skia","drawImage","image","sampling","_props$fit","fit","src","dst","fitRects","width","height","isCubicSampling","drawImageRectCubic","B","C","_sampling$filter","_sampling$mipmap","drawImageRectOptions","filter","FilterMode","Linear","mipmap","MipmapMode","None","drawPoints","points","mode","PointMode","enumKey","drawVertices","textures","colors","indices","blendMode","vertexMode","VertexMode","Triangles","vertices","MakeVertices","map","c","processColor","undefined","defaultBlendMode","BlendMode","DstOver","SrcOver","blend","drawDiffRect","outer","inner","drawDRRect","drawTextPath","path","processPath","font","initialOffset","text","ids","getGlyphIDs","widths","getGlyphWidths","rsx","meas","ContourMeasureIter","cont","next","dist","i","length","substring","p","t","getPosTan","adjustedX","adjustedY","push","RSXform","derived","TextBlob","MakeFromRSXform","drawTextBlob","drawText","drawPatch","texture","patch","pos","c2","c1","drawPath","start","trimStart","end","trimEnd","fillType","stroke","pathProps","saturate","hasStartOffset","hasEndOffset","hasStrokeOptions","hasFillType","willMutatePath","pristinePath","copy","setFillType","FillType","trim","drawRect","drawRRect","processRRect","blob","drawGlyphs","glyphs","reduce","acc","glyph","id","positions","drawImageSVG","svg","save","translate","drawSvg","restore","drawParagraph","paragraph","layout","drawPicture","picture","drawAtlas","sprites","transforms","drawCircle","processCircle","r","drawFill","_props","drawPaint"],"sources":["Drawing.ts"],"sourcesContent":["import {\n  enumKey,\n  fitRects,\n  processCircle,\n  processColor,\n  processPath,\n  processRect,\n  processRRect,\n} from \"../../../dom/nodes\";\nimport type {\n  AtlasProps,\n  CircleProps,\n  DiffRectProps,\n  DrawingNodeProps,\n  GlyphsProps,\n  ImageProps,\n  ImageSVGProps,\n  LineProps,\n  OvalProps,\n  ParagraphProps,\n  PatchProps,\n  PathProps,\n  PictureProps,\n  PointsProps,\n  RectProps,\n  RoundedRectProps,\n  TextBlobProps,\n  TextPathProps,\n  TextProps,\n  VerticesProps,\n} from \"../../../dom/types\";\nimport { saturate } from \"../../../renderer/processors\";\nimport type { SkPoint, SkRSXform } from \"../../../skia/types\";\nimport {\n  BlendMode,\n  FillType,\n  FilterMode,\n  isCubicSampling,\n  MipmapMode,\n  PointMode,\n  VertexMode,\n} from \"../../../skia/types\";\nimport type { DrawingContext } from \"../DrawingContext\";\n\nexport const drawLine = (ctx: DrawingContext, props: LineProps) => {\n  \"worklet\";\n  const { p1, p2 } = props;\n  ctx.canvas.drawLine(p1.x, p1.y, p2.x, p2.y, ctx.paint);\n};\n\nexport const drawOval = (ctx: DrawingContext, props: OvalProps) => {\n  \"worklet\";\n  const rect = processRect(ctx.Skia, props);\n  ctx.canvas.drawOval(rect, ctx.paint);\n};\n\nexport const drawImage = (ctx: DrawingContext, props: ImageProps) => {\n  \"worklet\";\n  const { image, sampling } = props;\n  if (image) {\n    const fit = props.fit ?? \"contain\";\n    const rect = processRect(ctx.Skia, props);\n    const { src, dst } = fitRects(\n      fit,\n      {\n        x: 0,\n        y: 0,\n        width: image.width(),\n        height: image.height(),\n      },\n      rect\n    );\n    if (sampling && isCubicSampling(sampling)) {\n      ctx.canvas.drawImageRectCubic(\n        image,\n        src,\n        dst,\n        sampling.B,\n        sampling.C,\n        ctx.paint\n      );\n    } else {\n      ctx.canvas.drawImageRectOptions(\n        image,\n        src,\n        dst,\n        sampling?.filter ?? FilterMode.Linear,\n        sampling?.mipmap ?? MipmapMode.None,\n        ctx.paint\n      );\n    }\n  }\n};\n\nexport const drawPoints = (ctx: DrawingContext, props: PointsProps) => {\n  \"worklet\";\n  const { points, mode } = props;\n  ctx.canvas.drawPoints(PointMode[enumKey(mode)], points, ctx.paint);\n};\n\nexport const drawVertices = (ctx: DrawingContext, props: VerticesProps) => {\n  \"worklet\";\n  const { mode, textures, colors, indices, blendMode } = props;\n  const vertexMode = mode ? VertexMode[enumKey(mode)] : VertexMode.Triangles;\n  const vertices = ctx.Skia.MakeVertices(\n    vertexMode,\n    props.vertices,\n    textures,\n    colors ? colors.map((c) => processColor(ctx.Skia, c)) : undefined,\n    indices\n  );\n  const defaultBlendMode = colors ? BlendMode.DstOver : BlendMode.SrcOver;\n  const blend = blendMode ? BlendMode[enumKey(blendMode)] : defaultBlendMode;\n\n  ctx.canvas.drawVertices(vertices, blend, ctx.paint);\n};\n\nexport const drawDiffRect = (ctx: DrawingContext, props: DiffRectProps) => {\n  \"worklet\";\n  const { outer, inner } = props;\n  ctx.canvas.drawDRRect(outer, inner, ctx.paint);\n};\n\nexport const drawTextPath = (ctx: DrawingContext, props: TextPathProps) => {\n  \"worklet\";\n  const path = processPath(ctx.Skia, props.path);\n  const { font, initialOffset } = props;\n  if (font) {\n    let { text } = props;\n    const ids = font.getGlyphIDs(text);\n    const widths = font.getGlyphWidths(ids);\n    const rsx: SkRSXform[] = [];\n    const meas = ctx.Skia.ContourMeasureIter(path, false, 1);\n    let cont = meas.next();\n    let dist = initialOffset;\n    for (let i = 0; i < text.length && cont; i++) {\n      const width = widths[i];\n      dist += width / 2;\n      if (dist > cont.length()) {\n        // jump to next contour\n        cont = meas.next();\n        if (!cont) {\n          // We have come to the end of the path - terminate the string\n          // right here.\n          text = text.substring(0, i);\n          break;\n        }\n        dist = width / 2;\n      }\n      // Gives us the (x, y) coordinates as well as the cos/sin of the tangent\n      // line at that position.\n      const [p, t] = cont.getPosTan(dist);\n      const adjustedX = p.x - (width / 2) * t.x;\n      const adjustedY = p.y - (width / 2) * t.y;\n      rsx.push(ctx.Skia.RSXform(t.x, t.y, adjustedX, adjustedY));\n      dist += width / 2;\n    }\n    const derived = ctx.Skia.TextBlob.MakeFromRSXform(text, rsx, font);\n    ctx.canvas.drawTextBlob(derived, 0, 0, ctx.paint);\n  }\n};\n\nexport const drawText = (ctx: DrawingContext, props: TextProps) => {\n  \"worklet\";\n  const { text, x, y, font } = props;\n  if (font != null) {\n    ctx.canvas.drawText(text, x, y, ctx.paint, font);\n  }\n};\n\nexport const drawPatch = (ctx: DrawingContext, props: PatchProps) => {\n  \"worklet\";\n  const { texture, blendMode, patch } = props;\n  const defaultBlendMode = props.colors ? BlendMode.DstOver : BlendMode.SrcOver;\n  const mode = blendMode ? BlendMode[enumKey(blendMode)] : defaultBlendMode;\n  // Patch requires a path with the following constraints:\n  // M tl\n  // C c1 c2 br\n  // C c1 c2 bl\n  // C c1 c2 tl (the redundant point in the last command is removed)\n\n  const points = [\n    patch[0].pos,\n    patch[0].c2,\n    patch[1].c1,\n    patch[1].pos,\n    patch[1].c2,\n    patch[2].c1,\n    patch[2].pos,\n    patch[2].c2,\n    patch[3].c1,\n    patch[3].pos,\n    patch[3].c2,\n    patch[0].c1,\n  ];\n  const colors = props.colors\n    ? props.colors.map((c) => processColor(ctx.Skia, c))\n    : undefined;\n  ctx.canvas.drawPatch(points, colors, texture, mode, ctx.paint);\n};\n\nexport const drawPath = (ctx: DrawingContext, props: PathProps) => {\n  \"worklet\";\n  const {\n    start: trimStart,\n    end: trimEnd,\n    fillType,\n    stroke,\n    ...pathProps\n  } = props;\n  const start = saturate(trimStart);\n  const end = saturate(trimEnd);\n  const hasStartOffset = start !== 0;\n  const hasEndOffset = end !== 1;\n  const hasStrokeOptions = stroke !== undefined;\n  const hasFillType = !!fillType;\n  const willMutatePath =\n    hasStartOffset || hasEndOffset || hasStrokeOptions || hasFillType;\n  const pristinePath = processPath(ctx.Skia, pathProps.path);\n  const path = willMutatePath ? pristinePath.copy() : pristinePath;\n  if (hasFillType) {\n    path.setFillType(FillType[enumKey(fillType)]);\n  }\n  if (hasStrokeOptions) {\n    path.stroke(stroke);\n  }\n  if (hasStartOffset || hasEndOffset) {\n    path.trim(start, end, false);\n  }\n  ctx.canvas.drawPath(path, ctx.paint);\n};\n\nexport const drawRect = (ctx: DrawingContext, props: RectProps) => {\n  \"worklet\";\n  const derived = processRect(ctx.Skia, props);\n  ctx.canvas.drawRect(derived, ctx.paint);\n};\n\nexport const drawRRect = (ctx: DrawingContext, props: RoundedRectProps) => {\n  \"worklet\";\n  const derived = processRRect(ctx.Skia, props);\n  ctx.canvas.drawRRect(derived, ctx.paint);\n};\n\nexport const drawTextBlob = (ctx: DrawingContext, props: TextBlobProps) => {\n  \"worklet\";\n  const { blob, x, y } = props;\n  ctx.canvas.drawTextBlob(blob, x, y, ctx.paint);\n};\n\ninterface ProcessedGlyphs {\n  glyphs: number[];\n  positions: SkPoint[];\n}\n\nexport const drawGlyphs = (ctx: DrawingContext, props: GlyphsProps) => {\n  \"worklet\";\n  const derived = props.glyphs.reduce<ProcessedGlyphs>(\n    (acc, glyph) => {\n      const { id, pos } = glyph;\n      acc.glyphs.push(id);\n      acc.positions.push(pos);\n      return acc;\n    },\n    { glyphs: [], positions: [] }\n  );\n  const { glyphs, positions } = derived;\n  const { x, y, font } = props;\n  if (font) {\n    ctx.canvas.drawGlyphs(glyphs, positions, x, y, font, ctx.paint);\n  }\n};\n\nexport const drawImageSVG = (ctx: DrawingContext, props: ImageSVGProps) => {\n  \"worklet\";\n  const { canvas } = ctx;\n  const { svg } = props;\n  const { x, y, width, height } = props.rect\n    ? props.rect\n    : { x: props.x, y: props.y, width: props.width, height: props.height };\n  if (svg === null) {\n    return;\n  }\n  canvas.save();\n  if (x && y) {\n    canvas.translate(x, y);\n  }\n  canvas.drawSvg(svg, width, height);\n  canvas.restore();\n};\n\nexport const drawParagraph = (ctx: DrawingContext, props: ParagraphProps) => {\n  \"worklet\";\n  const { paragraph, x, y, width } = props;\n  if (paragraph) {\n    paragraph.layout(width);\n    paragraph.paint(ctx.canvas, x, y);\n  }\n};\n\nexport const drawPicture = (ctx: DrawingContext, props: PictureProps) => {\n  \"worklet\";\n  const { picture } = props;\n  ctx.canvas.drawPicture(picture);\n};\n\nexport const drawAtlas = (ctx: DrawingContext, props: AtlasProps) => {\n  \"worklet\";\n  const { image, sprites, transforms, colors, blendMode, sampling } = props;\n  const blend = blendMode ? BlendMode[enumKey(blendMode)] : undefined;\n  if (image) {\n    ctx.canvas.drawAtlas(\n      image,\n      sprites,\n      transforms,\n      ctx.paint,\n      blend,\n      colors,\n      sampling\n    );\n  }\n};\n\nexport const drawCircle = (ctx: DrawingContext, props: CircleProps) => {\n  \"worklet\";\n  const { c } = processCircle(props);\n  const { r } = props;\n  ctx.canvas.drawCircle(c.x, c.y, r, ctx.paint);\n};\n\nexport const drawFill = (ctx: DrawingContext, _props: DrawingNodeProps) => {\n  \"worklet\";\n  ctx.canvas.drawPaint(ctx.paint);\n};\n"],"mappings":"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","ignoreList":[]}