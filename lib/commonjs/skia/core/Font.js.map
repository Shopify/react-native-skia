{"version":3,"names":["_react","require","_Skia","_types","_Platform","_Typeface","defaultFontSize","useFont","font","size","onError","typeface","useTypeface","useMemo","Skia","Font","exports","defaultFontStyle","fontFamily","fontSize","fontStyle","fontWeight","slant","s","FontSlant","Italic","Oblique","Upright","weight","parseInt","matchFont","inputStyle","fontMgr","FontMgr","System","style","width","matchFamilyStyle","listFontFamilies","Array","countFamilies","fill","map","_","i","getFamilyName","loadTypefaces","typefacesToLoad","promises","Object","keys","flatMap","familyName","typefaceToLoad","Data","fromURI","Platform","resolveAsset","then","data","tf","Typeface","MakeFreeTypeFaceFromData","Error","Promise","all","useFonts","sources","setFontMgr","useState","useEffect","result","fMgr","TypefaceFontProvider","Make","forEach","registerFont"],"sources":["Font.ts"],"sourcesContent":["/*global SkiaApi*/\nimport { useEffect, useMemo, useState } from \"react\";\n\nimport { Skia } from \"../Skia\";\nimport { FontSlant } from \"../types\";\nimport type { DataModule, DataSourceParam, SkFontMgr } from \"../types\";\nimport { Platform } from \"../../Platform\";\nimport type { SkTypefaceFontProvider } from \"../types/Paragraph/TypefaceFontProvider\";\n\nimport { useTypeface } from \"./Typeface\";\n\nconst defaultFontSize = 14;\n\n/**\n * Returns a Skia Font object\n * */\nexport const useFont = (\n  font: DataSourceParam,\n  size = defaultFontSize,\n  onError?: (err: Error) => void\n) => {\n  const typeface = useTypeface(font, onError);\n  return useMemo(() => {\n    if (typeface) {\n      return Skia.Font(typeface, size);\n    } else {\n      return null;\n    }\n  }, [size, typeface]);\n};\n\ntype Slant = \"normal\" | \"italic\" | \"oblique\";\ntype Weight =\n  | \"normal\"\n  | \"bold\"\n  | \"100\"\n  | \"200\"\n  | \"300\"\n  | \"400\"\n  | \"500\"\n  | \"600\"\n  | \"700\"\n  | \"800\"\n  | \"900\";\n\ninterface RNFontStyle {\n  fontFamily: string;\n  fontSize: number;\n  fontStyle: Slant;\n  fontWeight: Weight;\n}\n\nconst defaultFontStyle: RNFontStyle = {\n  fontFamily: \"System\",\n  fontSize: defaultFontSize,\n  fontStyle: \"normal\",\n  fontWeight: \"normal\",\n};\n\nconst slant = (s: Slant) => {\n  if (s === \"italic\") {\n    return FontSlant.Italic;\n  } else if (s === \"oblique\") {\n    return FontSlant.Oblique;\n  } else {\n    return FontSlant.Upright;\n  }\n};\n\nconst weight = (fontWeight: Weight) => {\n  switch (fontWeight) {\n    case \"normal\":\n      return 400;\n    case \"bold\":\n      return 700;\n    default:\n      return parseInt(fontWeight, 10);\n  }\n};\n\nexport const matchFont = (\n  inputStyle: Partial<RNFontStyle> = {},\n  fontMgr: SkFontMgr = Skia.FontMgr.System()\n) => {\n  const fontStyle = {\n    ...defaultFontStyle,\n    ...inputStyle,\n  };\n  const style = {\n    weight: weight(fontStyle.fontWeight),\n    width: 5,\n    slant: slant(fontStyle.fontStyle),\n  };\n  const typeface = fontMgr.matchFamilyStyle(fontStyle.fontFamily, style);\n  return Skia.Font(typeface, fontStyle.fontSize);\n};\n\nexport const listFontFamilies = (fontMgr: SkFontMgr = Skia.FontMgr.System()) =>\n  new Array(fontMgr.countFamilies())\n    .fill(0)\n    .map((_, i) => fontMgr.getFamilyName(i));\n\nconst loadTypefaces = (typefacesToLoad: Record<string, DataModule[]>) => {\n  const promises = Object.keys(typefacesToLoad).flatMap((familyName) => {\n    return typefacesToLoad[familyName].map((typefaceToLoad) => {\n      return Skia.Data.fromURI(Platform.resolveAsset(typefaceToLoad)).then(\n        (data) => {\n          const tf = Skia.Typeface.MakeFreeTypeFaceFromData(data);\n          if (tf === null) {\n            throw new Error(`Couldn't create typeface for ${familyName}`);\n          }\n          return [familyName, tf] as const;\n        }\n      );\n    });\n  });\n  return Promise.all(promises);\n};\n\nexport const useFonts = (sources: Record<string, DataModule[]>) => {\n  const [fontMgr, setFontMgr] = useState<null | SkTypefaceFontProvider>(null);\n\n  useEffect(() => {\n    loadTypefaces(sources).then((result) => {\n      const fMgr = Skia.TypefaceFontProvider.Make();\n      result.forEach(([familyName, typeface]) => {\n        fMgr.registerFont(typeface, familyName);\n      });\n      setFontMgr(fMgr);\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return fontMgr;\n};\n"],"mappings":"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","ignoreList":[]}