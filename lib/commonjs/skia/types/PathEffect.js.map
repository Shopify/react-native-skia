{"version":3,"names":["isPathEffect","obj","__typename__","exports","Path1DEffectStyle"],"sources":["PathEffect.ts"],"sourcesContent":["import type { SkJSIInstance } from \"./JsiInstance\";\nimport type { SkPath } from \"./Path/Path\";\nimport type { SkMatrix } from \"./Matrix\";\n\nexport type SkPathEffect = SkJSIInstance<\"PathEffect\">;\n\nexport const isPathEffect = (\n  obj: SkJSIInstance<string> | null\n): obj is SkPathEffect => obj !== null && obj.__typename__ === \"PathEffect\";\n\nexport enum Path1DEffectStyle {\n  Translate,\n  Rotate,\n  Morph,\n}\n\nexport interface PathEffectFactory {\n  /**\n   * Returns a PathEffect that can turn sharp corners into rounded corners.\n   * @param radius - if <=0, returns null\n   */\n  MakeCorner(radius: number): SkPathEffect | null;\n\n  /**\n   * Returns a PathEffect that add dashes to the path.\n   *\n   * See SkDashPathEffect.h for more details.\n   *\n   * @param intervals - even number of entries with even indicies specifying the length of\n   *                    the \"on\" intervals, and the odd indices specifying the length of \"off\".\n   * @param phase - offset length into the intervals array. Defaults to 0.\n   */\n  MakeDash(intervals: number[], phase?: number): SkPathEffect;\n\n  /**\n   * Returns a PathEffect that breaks path into segments of segLength length, and randomly move\n   * the endpoints away from the original path by a maximum of deviation.\n   * @param segLength - length of the subsegments.\n   * @param dev - limit of the movement of the endpoints.\n   * @param seedAssist - modifies the randomness. See SkDiscretePathEffect.h for more.\n   */\n  MakeDiscrete(\n    segLength: number,\n    dev: number,\n    seedAssist: number\n  ): SkPathEffect;\n\n  /**\n   *\n   * A pathEffect whose effect is to apply first the inner pathEffect and the the\n   * outer pathEffect (i.e. outer(inner(path))).\n   *\n   */\n  MakeCompose(outer: SkPathEffect, inner: SkPathEffect): SkPathEffect;\n\n  /**\n   *\n   * A pathEffect pathEffect whose effect is to apply two effects,\n   * in sequence (i.e. first(path) + second(path)).\n   *\n   */\n  MakeSum(outer: SkPathEffect, inner: SkPathEffect): SkPathEffect;\n\n  /**\n   * Returns a PathEffect that will fill the drawing path with a pattern made by applying\n   * the given matrix to a repeating set of infinitely long lines of the given width.\n   * For example, the scale of the provided matrix will determine how far apart the lines\n   * should be drawn its rotation affects the lines' orientation.\n   * @param width - must be >= 0\n   * @param matrix\n   */\n  MakeLine2D(width: number, matrix: SkMatrix): SkPathEffect | null;\n\n  /**\n   * Returns a PathEffect which implements dashing by replicating the specified path.\n   *   @param path The path to replicate (dash)\n   *   @param advance The space between instances of path\n   *   @param phase distance (mod advance) along path for its initial position\n   *   @param style how to transform path at each point (based on the current\n   *                position and tangent)\n   */\n  MakePath1D(\n    path: SkPath,\n    advance: number,\n    phase: number,\n    style: Path1DEffectStyle\n  ): SkPathEffect | null;\n\n  /**\n   * Returns a PathEffect that will fill the drawing path with a pattern by repeating the\n   * given path according to the provided matrix. For example, the scale of the matrix\n   * determines how far apart the path instances should be drawn.\n   * @param matrix\n   * @param path\n   */\n  MakePath2D(matrix: SkMatrix, path: SkPath): SkPathEffect | null;\n}\n"],"mappings":";;;;;;AAMO,MAAMA,YAAY,GACvBC,GAAiC,IACTA,GAAG,KAAK,IAAI,IAAIA,GAAG,CAACC,YAAY,KAAK,YAAY;AAACC,OAAA,CAAAH,YAAA,GAAAA,YAAA;AAAA,IAEhEI,iBAAiB,GAAAD,OAAA,CAAAC,iBAAA,0BAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAA,OAAjBA,iBAAiB;AAAA","ignoreList":[]}