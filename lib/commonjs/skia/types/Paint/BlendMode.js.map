{"version":3,"names":["BlendMode","exports"],"sources":["BlendMode.ts"],"sourcesContent":["/**\n *  Blends are operators that take in two colors (source, destination) and\n * return a new color. Many of these operate the same on all 4 components: red,\n * green, blue, alpha. For these, we just document what happens to one\n * component, rather than naming each one separately.\n *\n *  Different SkColorTypes have different representations for color components:\n *      8-bit: 0..255\n *      6-bit: 0..63\n *      5-bit: 0..31\n *      4-bit: 0..15\n *     floats: 0...1\n *\n *  The documentation is expressed as if the component values are always 0..1\n * (floats).\n *\n *  For brevity, the documentation uses the following abbreviations\n *  s  : source\n *  d  : destination\n *  sa : source alpha\n *  da : destination alpha\n *\n *  Results are abbreviated\n *  r  : if all 4 components are computed in the same manner\n *  ra : result alpha component\n *  rc : result \"color\": red, green, blue components\n */\nexport enum BlendMode {\n  Clear, //!< r = 0\n  Src, //!< r = s\n  Dst, //!< r = d\n  SrcOver, //!< r = s + (1-sa)*d\n  DstOver, //!< r = d + (1-da)*s\n  SrcIn, //!< r = s * da\n  DstIn, //!< r = d * sa\n  SrcOut, //!< r = s * (1-da)\n  DstOut, //!< r = d * (1-sa)\n  SrcATop, //!< r = s*da + d*(1-sa)\n  DstATop, //!< r = d*sa + s*(1-da)\n  Xor, //!< r = s*(1-da) + d*(1-sa)\n  Plus, //!< r = min(s + d, 1)\n  Modulate, //!< r = s*d\n  Screen, //!< r = s + d - s*d\n\n  Overlay, //!< multiply or screen, depending on destination\n  Darken, //!< rc = s + d - max(s*da, d*sa), ra = kSrcOver\n  Lighten, //!< rc = s + d - min(s*da, d*sa), ra = kSrcOver\n  ColorDodge, //!< brighten destination to reflect source\n  ColorBurn, //!< darken destination to reflect source\n  HardLight, //!< multiply or screen, depending on source\n  SoftLight, //!< lighten or darken, depending on source\n  Difference, //!< rc = s + d - 2*(min(s*da, d*sa)), ra = kSrcOver\n  Exclusion, //!< rc = s + d - two(s*d), ra = kSrcOver\n  Multiply, //!< r = s*(1-da) + d*(1-sa) + s*d\n\n  Hue, //!< hue of source with saturation and luminosity of destination\n  Saturation, //!< saturation of source with hue and luminosity of\n  //!< destination\n  Color, //!< hue and saturation of source with luminosity of destination\n  Luminosity, //!< luminosity of source with hue and saturation of\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA,IA2BYA,SAAS,GAAAC,OAAA,CAAAD,SAAA,0BAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EACZ;EADGA,SAAS,CAATA,SAAS;EAEd;EAFKA,SAAS,CAATA,SAAS;EAGd;EAHKA,SAAS,CAATA,SAAS;EAIV;EAJCA,SAAS,CAATA,SAAS;EAKV;EALCA,SAAS,CAATA,SAAS;EAMZ;EANGA,SAAS,CAATA,SAAS;EAOZ;EAPGA,SAAS,CAATA,SAAS;EAQX;EAREA,SAAS,CAATA,SAAS;EASX;EATEA,SAAS,CAATA,SAAS;EAUV;EAVCA,SAAS,CAATA,SAAS;EAWV;EAXCA,SAAS,CAATA,SAAS;EAYd;EAZKA,SAAS,CAATA,SAAS;EAab;EAbIA,SAAS,CAATA,SAAS;EAcT;EAdAA,SAAS,CAATA,SAAS;EAeX;EAfEA,SAAS,CAATA,SAAS;EAiBV;EAjBCA,SAAS,CAATA,SAAS;EAkBX;EAlBEA,SAAS,CAATA,SAAS;EAmBV;EAnBCA,SAAS,CAATA,SAAS;EAoBP;EApBFA,SAAS,CAATA,SAAS;EAqBR;EArBDA,SAAS,CAATA,SAAS;EAsBR;EAtBDA,SAAS,CAATA,SAAS;EAuBR;EAvBDA,SAAS,CAATA,SAAS;EAwBP;EAxBFA,SAAS,CAATA,SAAS;EAyBR;EAzBDA,SAAS,CAATA,SAAS;EA0BT;EA1BAA,SAAS,CAATA,SAAS;EA4Bd;EA5BKA,SAAS,CAATA,SAAS;EA6BP;EACZ;EA9BUA,SAAS,CAATA,SAAS;EA+BZ;EA/BGA,SAAS,CAATA,SAAS,qCAgCP;EAAA,OAhCFA,SAAS;AAAA","ignoreList":[]}