{"version":3,"names":["PaintStyle","exports","StrokeCap","StrokeJoin","isPaint","obj","__typename__"],"sources":["Paint.ts"],"sourcesContent":["import type { SkImageFilter } from \"../ImageFilter\";\nimport type { SkMaskFilter } from \"../MaskFilter\";\nimport type { SkColorFilter } from \"../ColorFilter\";\nimport type { SkColor } from \"../Color\";\nimport type { SkPathEffect } from \"../PathEffect\";\nimport type { SkJSIInstance } from \"../JsiInstance\";\nimport type { SkShader } from \"../Shader\";\n\nimport type { BlendMode } from \"./BlendMode\";\n\nexport enum PaintStyle {\n  Fill,\n  Stroke,\n}\n\nexport enum StrokeCap {\n  Butt,\n  Round,\n  Square,\n}\n\nexport enum StrokeJoin {\n  Miter,\n  Round,\n  Bevel,\n}\n\nexport const isPaint = (obj: SkJSIInstance<string> | null): obj is SkPaint =>\n  obj !== null && obj.__typename__ === \"Paint\";\n\nexport interface SkPaint extends SkJSIInstance<\"Paint\"> {\n  /**\n   * Retrieves alpha from the color used when stroking and filling.\n   */\n  getAlphaf(): number;\n\n  /**\n   * Returns a copy of this paint.\n   */\n  copy(): SkPaint;\n\n  /**\n   * Sets all SkPaint contents to their initial values. This is equivalent to replacing\n     SkPaint with the result of SkPaint().\n   */\n  reset(): void;\n\n  assign(paint: SkPaint): void;\n\n  /**\n   * Retrieves the alpha and RGB unpremultiplied. RGB are extended sRGB values\n   * (sRGB gamut, and encoded with the sRGB transfer function).\n   */\n  getColor(): SkColor;\n\n  /**\n   * Returns the geometry drawn at the beginning and end of strokes.\n   */\n  getStrokeCap(): StrokeCap;\n\n  /**\n   * Returns the geometry drawn at the corners of strokes.\n   */\n  getStrokeJoin(): StrokeJoin;\n\n  /**\n   *  Returns the limit at which a sharp corner is drawn beveled.\n   */\n  getStrokeMiter(): number;\n\n  /**\n   * Returns the thickness of the pen used to outline the shape.\n   */\n  getStrokeWidth(): number;\n\n  /**\n   * Replaces alpha, leaving RGBA unchanged. 0 means fully transparent, 1.0 means opaque.\n   * @param alpha\n   */\n  setAlphaf(alpha: number): void;\n\n  /**\n   * Requests, but does not require, that edge pixels draw opaque or with\n   * partial transparency.\n   * @param aa\n   */\n  setAntiAlias: (aa: boolean) => void;\n\n  /**\n   * Requests, but does not require, to distribute color error.\n   * @param dither\n   */\n  setDither: (dither: boolean) => void;\n\n  /**\n   * Sets the blend mode that is, the mode used to combine source color\n   * with destination color.\n   * @param mode\n   */\n  setBlendMode: (blendMode: BlendMode) => void;\n\n  /**\n   *  Sets alpha and RGB used when stroking and filling. The color is a 32-bit\n   *  value, unpremultiplied, packing 8-bit components for alpha, red, blue,\n   *  and green.\n   *\n   *   @param color  unpremultiplied ARGB\n   *\n   *    example: https://fiddle.skia.org/c/@Paint_setColor\n   */\n  setColor(color: SkColor): void;\n\n  /**\n   * Sets the current color filter, replacing the existing one if there was one.\n   * @param filter\n   */\n  setColorFilter(filter: SkColorFilter | null): void;\n\n  /**\n   * Sets the current image filter, replacing the existing one if there was one.\n   * @param filter\n   */\n  setImageFilter(filter: SkImageFilter | null): void;\n\n  /**\n   * Sets the current mask filter, replacing the existing one if there was one.\n   * @param filter\n   */\n  setMaskFilter(filter: SkMaskFilter | null): void;\n\n  /**\n   * Sets the current path effect, replacing the existing one if there was one.\n   * @param effect\n   */\n  setPathEffect(effect: SkPathEffect | null): void;\n\n  /**\n   * Sets the current shader, replacing the existing one if there was one.\n   * @param shader\n   */\n  setShader(shader: SkShader | null): void;\n\n  /**\n   * Sets the geometry drawn at the beginning and end of strokes.\n   * @param cap\n   */\n  setStrokeCap(cap: StrokeCap): void;\n\n  /**\n   * Sets the geometry drawn at the corners of strokes.\n   * @param join\n   */\n  setStrokeJoin(join: StrokeJoin): void;\n\n  /**\n   * Sets the limit at which a sharp corner is drawn beveled.\n   * @param limit\n   */\n  setStrokeMiter(limit: number): void;\n\n  /**\n   * Sets the thickness of the pen used to outline the shape.\n   * @param width\n   */\n  setStrokeWidth(width: number): void;\n\n  /**\n   * Sets whether the geometry is filled or stroked.\n   * @param style\n   */\n  setStyle(style: PaintStyle): void;\n}\n"],"mappings":";;;;;;IAUYA,UAAU,GAAAC,OAAA,CAAAD,UAAA,0BAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAAA,IAKVE,SAAS,GAAAD,OAAA,CAAAC,SAAA,0BAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAAA,OAATA,SAAS;AAAA;AAAA,IAMTC,UAAU,GAAAF,OAAA,CAAAE,UAAA,0BAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAMf,MAAMC,OAAO,GAAIC,GAAiC,IACvDA,GAAG,KAAK,IAAI,IAAIA,GAAG,CAACC,YAAY,KAAK,OAAO;AAACL,OAAA,CAAAG,OAAA,GAAAA,OAAA","ignoreList":[]}