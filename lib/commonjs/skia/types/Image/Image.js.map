{"version":3,"names":["FilterMode","exports","MipmapMode","ImageFormat","isCubicSampling","sampling","MitchellCubicSampling","B","C","CatmullRomCubicSampling","CubicSampling","MakeCubic"],"sources":["Image.ts"],"sourcesContent":["import type { SkMatrix } from \"../Matrix\";\nimport type { SkJSIInstance } from \"../JsiInstance\";\nimport type { TileMode } from \"../ImageFilter\";\nimport type { SkShader } from \"../Shader\";\n\nimport type { ImageInfo } from \"./ImageFactory\";\n\nexport interface CubicResampler {\n  B: number;\n  C: number;\n}\n\nexport interface FilterOptions {\n  filter: FilterMode;\n  mipmap?: MipmapMode;\n}\n\nexport enum FilterMode {\n  Nearest,\n  Linear,\n}\n\nexport enum MipmapMode {\n  None,\n  Nearest,\n  Linear,\n}\n\nexport enum ImageFormat {\n  JPEG = 3,\n  PNG = 4,\n  WEBP = 6,\n}\n\nexport type SamplingOptions = CubicResampler | FilterOptions;\n\nexport const isCubicSampling = (\n  sampling: SamplingOptions\n): sampling is CubicResampler => {\n  \"worklet\";\n  return \"B\" in sampling && \"C\" in sampling;\n};\n\nexport const MitchellCubicSampling = { B: 1 / 3.0, C: 1 / 3.0 };\nexport const CatmullRomCubicSampling = { B: 0, C: 1 / 2.0 };\nexport const CubicSampling = { B: 0, C: 0 };\nexport const MakeCubic = (B: number, C: number) => ({ B, C });\n\nexport interface SkImage extends SkJSIInstance<\"Image\"> {\n  /**\n   * Returns the possibly scaled height of the image.\n   */\n  height(): number;\n\n  /**\n   * Returns the possibly scaled width of the image.\n   */\n  width(): number;\n\n  /**\n   * Returns the ImageInfo describing the image.\n   */\n  getImageInfo(): ImageInfo;\n\n  /**\n   * Returns the backend texture of the image.\n   * The returned object can be used to create a Skia Image object.\n   * The returned object is backend specific and should be used with caution.\n   * It is the caller's responsibility to ensure that the texture is not used after the image is deleted.\n   * The returned object may be null if the image does not have a backend texture.\n   *\n   * @return backend texture of the image or null\n   */\n  getNativeTextureUnstable(): unknown;\n\n  /**\n   * Returns this image as a shader with the specified tiling. It will use cubic sampling.\n   * @param tx - tile mode in the x direction.\n   * @param ty - tile mode in the y direction.\n   * @param fm - The filter mode. (default nearest)\n   * @param mm - The mipmap mode. Note: for settings other than None, the image must have mipmaps (default none)\n   *             calculated with makeCopyWithDefaultMipmaps;\n   * @param localMatrix\n   */\n  makeShaderOptions(\n    tx: TileMode,\n    ty: TileMode,\n    fm: FilterMode,\n    mm: MipmapMode,\n    localMatrix?: SkMatrix\n  ): SkShader;\n\n  /**\n   * Returns this image as a shader with the specified tiling. It will use cubic sampling.\n   * @param tx - tile mode in the x direction.\n   * @param ty - tile mode in the y direction.\n   * @param B - See CubicResampler in SkSamplingOptions.h for more information\n   * @param C - See CubicResampler in SkSamplingOptions.h for more information\n   * @param localMatrix\n   */\n  makeShaderCubic(\n    tx: TileMode,\n    ty: TileMode,\n    B: number,\n    C: number,\n    localMatrix?: SkMatrix\n  ): SkShader;\n\n  /** Encodes Image pixels, returning result as UInt8Array. Returns existing\n     encoded data if present; otherwise, SkImage is encoded with\n     SkEncodedImageFormat::kPNG. Skia must be built with SK_ENCODE_PNG to encode\n     SkImage.\n\n    Returns nullptr if existing encoded data is missing or invalid, and\n    encoding fails.\n\n    @param fmt - PNG is the default value.\n    @param quality - a value from 0 to 100; 100 is the least lossy. May be ignored.\n\n    @return  Uint8Array with data\n  */\n  encodeToBytes(fmt?: ImageFormat, quality?: number): Uint8Array;\n\n  /** Encodes Image pixels, returning result as a base64 encoded string. Returns existing\n     encoded data if present; otherwise, SkImage is encoded with\n     SkEncodedImageFormat::kPNG. Skia must be built with SK_ENCODE_PNG to encode\n     SkImage.\n\n    Returns nullptr if existing encoded data is missing or invalid, and\n    encoding fails.\n\n    @param fmt - PNG is the default value.\n    @param quality - a value from 0 to 100; 100 is the least lossy. May be ignored.\n\n    @return  base64 encoded string of data\n  */\n  encodeToBase64(fmt?: ImageFormat, quality?: number): string;\n\n  /** Read Image pixels\n   *\n   * @param srcX - optional x-axis upper left corner of the rectangle to read from\n   * @param srcY - optional y-axis upper left corner of the rectangle to read from\n   * @param imageInfo - optional describes the pixel format and dimensions of the data to read into\n   * @return Float32Array or Uint8Array with data or null if the read failed.\n   */\n  readPixels(\n    srcX?: number,\n    srcY?: number,\n    imageInfo?: ImageInfo\n  ): Float32Array | Uint8Array | null;\n\n  /**\n   * Returns raster image or lazy image. Copies SkImage backed by GPU texture\n   * into CPU memory if needed. Returns original SkImage if decoded in raster\n   * bitmap, or if encoded in a stream.\n   */\n  makeNonTextureImage(): SkImage;\n}\n"],"mappings":";;;;;;IAiBYA,UAAU,GAAAC,OAAA,CAAAD,UAAA,0BAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAAA,IAKVE,UAAU,GAAAD,OAAA,CAAAC,UAAA,0BAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAAA,IAMVC,WAAW,GAAAF,OAAA,CAAAE,WAAA,0BAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAQhB,MAAMC,eAAe,GAC1BC,QAAyB,IACM;EAC/B,SAAS;;EACT,OAAO,GAAG,IAAIA,QAAQ,IAAI,GAAG,IAAIA,QAAQ;AAC3C,CAAC;AAACJ,OAAA,CAAAG,eAAA,GAAAA,eAAA;AAEK,MAAME,qBAAqB,GAAAL,OAAA,CAAAK,qBAAA,GAAG;EAAEC,CAAC,EAAE,CAAC,GAAG,GAAG;EAAEC,CAAC,EAAE,CAAC,GAAG;AAAI,CAAC;AACxD,MAAMC,uBAAuB,GAAAR,OAAA,CAAAQ,uBAAA,GAAG;EAAEF,CAAC,EAAE,CAAC;EAAEC,CAAC,EAAE,CAAC,GAAG;AAAI,CAAC;AACpD,MAAME,aAAa,GAAAT,OAAA,CAAAS,aAAA,GAAG;EAAEH,CAAC,EAAE,CAAC;EAAEC,CAAC,EAAE;AAAE,CAAC;AACpC,MAAMG,SAAS,GAAGA,CAACJ,CAAS,EAAEC,CAAS,MAAM;EAAED,CAAC;EAAEC;AAAE,CAAC,CAAC;AAACP,OAAA,CAAAU,SAAA,GAAAA,SAAA","ignoreList":[]}