{"version":3,"names":["exhaustiveCheck","validateInterpolationOptions","Extrapolate","lerp","value","from","to","p1","p2","output","t","interpolate","interpolatePaths","input","outputRange","options","extrapolation","extrapolateLeft","CLAMP","EXTEND","IDENTITY","Error","length","extrapolateRight","i"],"sources":["interpolatePaths.ts"],"sourcesContent":["import type { SkPath } from \"../../skia/types\";\nimport { exhaustiveCheck } from \"../../renderer/typeddash\";\n\nimport type { ExtrapolationType } from \"./interpolate\";\nimport { validateInterpolationOptions, Extrapolate } from \"./interpolate\";\n\nconst lerp = (\n  value: number,\n  from: number,\n  to: number,\n  p1: SkPath,\n  p2: SkPath,\n  output?: SkPath\n) => {\n  \"worklet\";\n  const t = (value - from) / (to - from);\n  return p2.interpolate(p1, t, output)!;\n};\n\n/**\n * Maps an input value within a range to an output path within a path range.\n * @param value - The input value.\n * @param inputRange - The range of the input value.\n * @param outputRange - The range of the output path.\n * @param options - Extrapolation options\n * @returns The output path.\n * @example <caption>Map a value between 0 and 1 to a path between two paths.</caption>\n * const path1 = new Path();\n * path1.moveTo(0, 0);\n * path1.lineTo(100, 0);\n * const path2 = new Path();\n * path2.moveTo(0, 0);\n * path2.lineTo(0, 100);\n * const path = interpolatePath(0.5, [0, 1], [path1, path2]);\n */\nexport const interpolatePaths = (\n  value: number,\n  input: number[],\n  outputRange: SkPath[],\n  options?: ExtrapolationType,\n  output?: SkPath\n) => {\n  \"worklet\";\n  const extrapolation = validateInterpolationOptions(options);\n  if (value < input[0]) {\n    switch (extrapolation.extrapolateLeft) {\n      case Extrapolate.CLAMP:\n        return outputRange[0];\n      case Extrapolate.EXTEND:\n        return lerp(value, input[0], input[1], outputRange[0], outputRange[1]);\n      case Extrapolate.IDENTITY:\n        throw new Error(\n          \"Identity is not a supported extrapolation type for interpolatePaths()\"\n        );\n      default:\n        exhaustiveCheck(extrapolation.extrapolateLeft);\n    }\n  } else if (value > input[input.length - 1]) {\n    switch (extrapolation.extrapolateRight) {\n      case Extrapolate.CLAMP:\n        return outputRange[outputRange.length - 1];\n      case Extrapolate.EXTEND:\n        return lerp(\n          value,\n          input[input.length - 2],\n          input[input.length - 1],\n          outputRange[input.length - 2],\n          outputRange[input.length - 1]\n        );\n      case Extrapolate.IDENTITY:\n        throw new Error(\n          \"Identity is not a supported extrapolation type for interpolatePaths()\"\n        );\n      default:\n        exhaustiveCheck(extrapolation.extrapolateRight);\n    }\n  }\n  let i = 0;\n  for (; i <= input.length - 1; i++) {\n    if (value >= input[i] && value <= input[i + 1]) {\n      break;\n    }\n  }\n  return lerp(\n    value,\n    input[i],\n    input[i + 1],\n    outputRange[i],\n    outputRange[i + 1],\n    output\n  );\n};\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,0BAA0B;AAG1D,SAASC,4BAA4B,EAAEC,WAAW,QAAQ,eAAe;AAEzE,MAAMC,IAAI,GAAGA,CACXC,KAAa,EACbC,IAAY,EACZC,EAAU,EACVC,EAAU,EACVC,EAAU,EACVC,MAAe,KACZ;EACH,SAAS;;EACT,MAAMC,CAAC,GAAG,CAACN,KAAK,GAAGC,IAAI,KAAKC,EAAE,GAAGD,IAAI,CAAC;EACtC,OAAOG,EAAE,CAACG,WAAW,CAACJ,EAAE,EAAEG,CAAC,EAAED,MAAM,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAC9BR,KAAa,EACbS,KAAe,EACfC,WAAqB,EACrBC,OAA2B,EAC3BN,MAAe,KACZ;EACH,SAAS;;EACT,MAAMO,aAAa,GAAGf,4BAA4B,CAACc,OAAO,CAAC;EAC3D,IAAIX,KAAK,GAAGS,KAAK,CAAC,CAAC,CAAC,EAAE;IACpB,QAAQG,aAAa,CAACC,eAAe;MACnC,KAAKf,WAAW,CAACgB,KAAK;QACpB,OAAOJ,WAAW,CAAC,CAAC,CAAC;MACvB,KAAKZ,WAAW,CAACiB,MAAM;QACrB,OAAOhB,IAAI,CAACC,KAAK,EAAES,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,EAAEC,WAAW,CAAC,CAAC,CAAC,EAAEA,WAAW,CAAC,CAAC,CAAC,CAAC;MACxE,KAAKZ,WAAW,CAACkB,QAAQ;QACvB,MAAM,IAAIC,KAAK,CACb,uEACF,CAAC;MACH;QACErB,eAAe,CAACgB,aAAa,CAACC,eAAe,CAAC;IAClD;EACF,CAAC,MAAM,IAAIb,KAAK,GAAGS,KAAK,CAACA,KAAK,CAACS,MAAM,GAAG,CAAC,CAAC,EAAE;IAC1C,QAAQN,aAAa,CAACO,gBAAgB;MACpC,KAAKrB,WAAW,CAACgB,KAAK;QACpB,OAAOJ,WAAW,CAACA,WAAW,CAACQ,MAAM,GAAG,CAAC,CAAC;MAC5C,KAAKpB,WAAW,CAACiB,MAAM;QACrB,OAAOhB,IAAI,CACTC,KAAK,EACLS,KAAK,CAACA,KAAK,CAACS,MAAM,GAAG,CAAC,CAAC,EACvBT,KAAK,CAACA,KAAK,CAACS,MAAM,GAAG,CAAC,CAAC,EACvBR,WAAW,CAACD,KAAK,CAACS,MAAM,GAAG,CAAC,CAAC,EAC7BR,WAAW,CAACD,KAAK,CAACS,MAAM,GAAG,CAAC,CAC9B,CAAC;MACH,KAAKpB,WAAW,CAACkB,QAAQ;QACvB,MAAM,IAAIC,KAAK,CACb,uEACF,CAAC;MACH;QACErB,eAAe,CAACgB,aAAa,CAACO,gBAAgB,CAAC;IACnD;EACF;EACA,IAAIC,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,IAAIX,KAAK,CAACS,MAAM,GAAG,CAAC,EAAEE,CAAC,EAAE,EAAE;IACjC,IAAIpB,KAAK,IAAIS,KAAK,CAACW,CAAC,CAAC,IAAIpB,KAAK,IAAIS,KAAK,CAACW,CAAC,GAAG,CAAC,CAAC,EAAE;MAC9C;IACF;EACF;EACA,OAAOrB,IAAI,CACTC,KAAK,EACLS,KAAK,CAACW,CAAC,CAAC,EACRX,KAAK,CAACW,CAAC,GAAG,CAAC,CAAC,EACZV,WAAW,CAACU,CAAC,CAAC,EACdV,WAAW,CAACU,CAAC,GAAG,CAAC,CAAC,EAClBf,MACF,CAAC;AACH,CAAC","ignoreList":[]}