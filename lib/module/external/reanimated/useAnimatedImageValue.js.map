{"version":3,"names":["useAnimatedImage","Rea","DEFAULT_FRAME_DURATION","useAnimatedImageValue","source","paused","defaultPaused","useSharedValue","isPaused","currentFrame","lastTimestamp","animatedImage","err","console","error","Error","message","frameDuration","currentFrameDuration","useFrameCallback","frameInfo","value","timestamp","elapsed","decodeNextFrame","oldFrame","getCurrentFrame","dispose"],"sources":["useAnimatedImageValue.ts"],"sourcesContent":["import type { FrameInfo, SharedValue } from \"react-native-reanimated\";\n\nimport { useAnimatedImage } from \"../../skia/core/AnimatedImage\";\nimport type { DataSourceParam, SkImage } from \"../../skia/types\";\n\nimport Rea from \"./ReanimatedProxy\";\n\nconst DEFAULT_FRAME_DURATION = 60;\n\nexport const useAnimatedImageValue = (\n  source: DataSourceParam,\n  paused?: SharedValue<boolean>\n) => {\n  const defaultPaused = Rea.useSharedValue(false);\n  const isPaused = paused ?? defaultPaused;\n  const currentFrame = Rea.useSharedValue<null | SkImage>(null);\n  const lastTimestamp = Rea.useSharedValue(-1);\n  const animatedImage = useAnimatedImage(source, (err) => {\n    console.error(err);\n    throw new Error(`Could not load animated image - got '${err.message}'`);\n  });\n  const frameDuration =\n    animatedImage?.currentFrameDuration() || DEFAULT_FRAME_DURATION;\n\n  Rea.useFrameCallback((frameInfo: FrameInfo) => {\n    if (!animatedImage) {\n      currentFrame.value = null;\n      return;\n    }\n    if (isPaused.value && lastTimestamp.value !== -1) {\n      return;\n    }\n    const { timestamp } = frameInfo;\n    const elapsed = timestamp - lastTimestamp.value;\n\n    // Check if it's time to switch frames based on GIF frame duration\n    if (elapsed < frameDuration) {\n      return;\n    }\n\n    // Update the current frame\n    animatedImage.decodeNextFrame();\n    const oldFrame = currentFrame.value;\n    currentFrame.value = animatedImage.getCurrentFrame();\n    if (oldFrame) {\n      oldFrame.dispose();\n    }\n\n    // Update the last timestamp\n    lastTimestamp.value = timestamp;\n  });\n  return currentFrame;\n};\n"],"mappings":"AAEA,SAASA,gBAAgB,QAAQ,+BAA+B;AAGhE,OAAOC,GAAG,MAAM,mBAAmB;AAEnC,MAAMC,sBAAsB,GAAG,EAAE;AAEjC,OAAO,MAAMC,qBAAqB,GAAGA,CACnCC,MAAuB,EACvBC,MAA6B,KAC1B;EACH,MAAMC,aAAa,GAAGL,GAAG,CAACM,cAAc,CAAC,KAAK,CAAC;EAC/C,MAAMC,QAAQ,GAAGH,MAAM,aAANA,MAAM,cAANA,MAAM,GAAIC,aAAa;EACxC,MAAMG,YAAY,GAAGR,GAAG,CAACM,cAAc,CAAiB,IAAI,CAAC;EAC7D,MAAMG,aAAa,GAAGT,GAAG,CAACM,cAAc,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAMI,aAAa,GAAGX,gBAAgB,CAACI,MAAM,EAAGQ,GAAG,IAAK;IACtDC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,MAAM,IAAIG,KAAK,CAAC,wCAAwCH,GAAG,CAACI,OAAO,GAAG,CAAC;EACzE,CAAC,CAAC;EACF,MAAMC,aAAa,GACjB,CAAAN,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEO,oBAAoB,CAAC,CAAC,KAAIhB,sBAAsB;EAEjED,GAAG,CAACkB,gBAAgB,CAAEC,SAAoB,IAAK;IAC7C,IAAI,CAACT,aAAa,EAAE;MAClBF,YAAY,CAACY,KAAK,GAAG,IAAI;MACzB;IACF;IACA,IAAIb,QAAQ,CAACa,KAAK,IAAIX,aAAa,CAACW,KAAK,KAAK,CAAC,CAAC,EAAE;MAChD;IACF;IACA,MAAM;MAAEC;IAAU,CAAC,GAAGF,SAAS;IAC/B,MAAMG,OAAO,GAAGD,SAAS,GAAGZ,aAAa,CAACW,KAAK;;IAE/C;IACA,IAAIE,OAAO,GAAGN,aAAa,EAAE;MAC3B;IACF;;IAEA;IACAN,aAAa,CAACa,eAAe,CAAC,CAAC;IAC/B,MAAMC,QAAQ,GAAGhB,YAAY,CAACY,KAAK;IACnCZ,YAAY,CAACY,KAAK,GAAGV,aAAa,CAACe,eAAe,CAAC,CAAC;IACpD,IAAID,QAAQ,EAAE;MACZA,QAAQ,CAACE,OAAO,CAAC,CAAC;IACpB;;IAEA;IACAjB,aAAa,CAACW,KAAK,GAAGC,SAAS;EACjC,CAAC,CAAC;EACF,OAAOb,YAAY;AACrB,CAAC","ignoreList":[]}