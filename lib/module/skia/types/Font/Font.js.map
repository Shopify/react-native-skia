{"version":3,"names":["fontStyle","weight","width","slant","FontWeight","FontWidth","FontSlant","FontEdging","FontHinting","FontStyle","Normal","Upright","Bold","Italic","BoldItalic"],"sources":["Font.ts"],"sourcesContent":["import type { SkJSIInstance } from \"../JsiInstance\";\nimport type { SkPaint } from \"../Paint\";\nimport type { SkRect } from \"../Rect\";\nimport type { SkPoint } from \"../Point\";\nimport type { SkTypeface } from \"../Typeface\";\n\nexport interface FontMetrics {\n  ascent: number; // suggested space above the baseline. < 0\n  descent: number; // suggested space below the baseline. > 0\n  leading: number; // suggested spacing between descent of previous line and ascent of next line.\n  bounds?: SkRect; // smallest rect containing all glyphs (relative to 0,0)\n}\n\nexport interface SkFont extends SkJSIInstance<\"Font\"> {\n  /**\n   * Returns the advance width of text.\n   * The advance is the normal distance to move before drawing additional text.\n   * Returns the bounding box of text\n   * @param text\n   * @param paint\n   */\n  measureText(text: string, paint?: SkPaint): SkRect;\n\n  /**\n   * Retrieves the total width of the provided text\n   * @param text\n   * @param paint\n   * @deprecated Use measureText or getGlyphWidths instead\n   */\n  getTextWidth(text: string, paint?: SkPaint): number;\n\n  /**\n   * Retrieves the advanceX measurements for each glyph.\n   * If paint is not null, its stroking, PathEffect, and MaskFilter fields are respected.\n   * One width per glyph is returned in the returned array.\n   * @param glyphs\n   * @param paint\n   */\n  getGlyphWidths(glyphs: number[], paint?: SkPaint): number[];\n\n  /**\n   * Returns the FontMetrics for this font.\n   */\n  getMetrics(): FontMetrics;\n\n  /**\n   * Retrieves the glyph ids for each code point in the provided string. This call is passed to\n   * the typeface of this font. Note that glyph IDs are typeface-dependent; different faces\n   * may have different ids for the same code point.\n   * @param str\n   * @param numCodePoints - the number of code points in the string. Defaults to str.length.\n   */\n  getGlyphIDs(str: string, numCodePoints?: number): number[];\n\n  /**\n   * Computes any intersections of a thick \"line\" and a run of positionsed glyphs.\n   * The thick line is represented as a top and bottom coordinate (positive for\n   * below the baseline, negative for above). If there are no intersections\n   * (e.g. if this is intended as an underline, and there are no \"collisions\")\n   * then the returned array will be empty. If there are intersections, the array\n   * will contain pairs of X coordinates [start, end] for each segment that\n   * intersected with a glyph.\n   *\n   * @param glyphs        the glyphs to intersect with\n   * @param positions     x,y coordinates (2 per glyph) for each glyph\n   * @param top           top of the thick \"line\" to use for intersection testing\n   * @param bottom        bottom of the thick \"line\" to use for intersection testing\n   * @return              array of [start, end] x-coordinate pairs. Maybe be empty.\n   */\n  getGlyphIntercepts(\n    glyphs: number[],\n    positions: SkPoint[],\n    top: number,\n    bottom: number\n  ): number[];\n\n  /**\n   * Returns text scale on x-axis. Default value is 1.\n   */\n  getScaleX(): number;\n\n  /**\n   * Returns text size in points.\n   */\n  getSize(): number;\n\n  /**\n   * Returns text skew on x-axis. Default value is zero.\n   */\n  getSkewX(): number;\n\n  /**\n   * Returns embolden effect for this font. Default value is false.\n   */\n  isEmbolden(): boolean;\n\n  /**\n   * Returns the Typeface set for this font.\n   */\n  getTypeface(): SkTypeface | null;\n\n  /**\n   * Requests, but does not require, that edge pixels draw opaque or with partial transparency.\n   * @param edging\n   */\n  setEdging(edging: FontEdging): void;\n\n  /**\n   * Requests, but does not require, to use bitmaps in fonts instead of outlines.\n   * @param embeddedBitmaps\n   */\n  setEmbeddedBitmaps(embeddedBitmaps: boolean): void;\n\n  /**\n   * Sets level of glyph outline adjustment.\n   * @param hinting\n   */\n  setHinting(hinting: FontHinting): void;\n\n  /**\n   * Requests, but does not require, linearly scalable font and glyph metrics.\n   *\n   * For outline fonts 'true' means font and glyph metrics should ignore hinting and rounding.\n   * Note that some bitmap formats may not be able to scale linearly and will ignore this flag.\n   * @param linearMetrics\n   */\n  setLinearMetrics(linearMetrics: boolean): void;\n\n  /**\n   * Sets the text scale on the x-axis.\n   * @param sx\n   */\n  setScaleX(sx: number): void;\n\n  /**\n   * Sets the text size in points on this font.\n   * @param points\n   */\n  setSize(points: number): void;\n\n  /**\n   * Sets the text-skew on the x axis for this font.\n   * @param sx\n   */\n  setSkewX(sx: number): void;\n\n  /**\n   * Set embolden effect for this font.\n   * @param embolden\n   */\n  setEmbolden(embolden: boolean): void;\n\n  /**\n   * Requests, but does not require, that glyphs respect sub-pixel positioning.\n   * @param subpixel\n   */\n  setSubpixel(subpixel: boolean): void;\n\n  /**\n   * Sets the typeface to use with this font. null means to clear the typeface and use the\n   * default one.\n   * @param face\n   */\n  setTypeface(face: SkTypeface | null): void;\n}\n\nconst fontStyle = (\n  weight: FontWeight,\n  width: FontWidth,\n  slant: FontSlant\n): FontStyle => ({ weight, width, slant });\n\nexport interface FontStyle {\n  weight?: FontWeight;\n  width?: FontWidth;\n  slant?: FontSlant;\n}\n\nexport enum FontWeight {\n  Invisible = 0,\n  Thin = 100,\n  ExtraLight = 200,\n  Light = 300,\n  Normal = 400,\n  Medium = 500,\n  SemiBold = 600,\n  Bold = 700,\n  ExtraBold = 800,\n  Black = 900,\n  ExtraBlack = 1000,\n}\n\nexport enum FontWidth {\n  UltraCondensed = 1,\n  ExtraCondensed = 2,\n  Condensed = 3,\n  SemiCondensed = 4,\n  Normal = 5,\n  SemiExpanded = 6,\n  Expanded = 7,\n  ExtraExpanded = 8,\n  UltraExpanded = 9,\n}\n\nexport enum FontSlant {\n  Upright,\n  Italic,\n  Oblique,\n}\n\nexport enum FontEdging {\n  Alias,\n  AntiAlias,\n  SubpixelAntiAlias,\n}\n\nexport enum FontHinting {\n  None,\n  Slight,\n  Normal,\n  Full,\n}\n\nexport const FontStyle = {\n  Normal: fontStyle(FontWeight.Normal, FontWidth.Normal, FontSlant.Upright),\n  Bold: fontStyle(FontWeight.Bold, FontWidth.Normal, FontSlant.Upright),\n  Italic: fontStyle(FontWeight.Normal, FontWidth.Normal, FontSlant.Italic),\n  BoldItalic: fontStyle(FontWeight.Bold, FontWidth.Normal, FontSlant.Italic),\n};\n"],"mappings":"AAsKA,MAAMA,SAAS,GAAGA,CAChBC,MAAkB,EAClBC,KAAgB,EAChBC,KAAgB,MACD;EAAEF,MAAM;EAAEC,KAAK;EAAEC;AAAM,CAAC,CAAC;AAQ1C,WAAYC,UAAU,0BAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AActB,WAAYC,SAAS,0BAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAAA,OAATA,SAAS;AAAA;AAYrB,WAAYC,SAAS,0BAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAAA,OAATA,SAAS;AAAA;AAMrB,WAAYC,UAAU,0BAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAMtB,WAAYC,WAAW,0BAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAOvB,OAAO,MAAMC,SAAS,GAAG;EACvBC,MAAM,EAAEV,SAAS,CAACI,UAAU,CAACM,MAAM,EAAEL,SAAS,CAACK,MAAM,EAAEJ,SAAS,CAACK,OAAO,CAAC;EACzEC,IAAI,EAAEZ,SAAS,CAACI,UAAU,CAACQ,IAAI,EAAEP,SAAS,CAACK,MAAM,EAAEJ,SAAS,CAACK,OAAO,CAAC;EACrEE,MAAM,EAAEb,SAAS,CAACI,UAAU,CAACM,MAAM,EAAEL,SAAS,CAACK,MAAM,EAAEJ,SAAS,CAACO,MAAM,CAAC;EACxEC,UAAU,EAAEd,SAAS,CAACI,UAAU,CAACQ,IAAI,EAAEP,SAAS,CAACK,MAAM,EAAEJ,SAAS,CAACO,MAAM;AAC3E,CAAC","ignoreList":[]}