{"version":3,"names":["ColorChannel"],"sources":["ImageFilterFactory.ts"],"sourcesContent":["import type { SkColor } from \"../Color\";\nimport type { SkColorFilter } from \"../ColorFilter/ColorFilter\";\nimport type { BlendMode } from \"../Paint\";\nimport type { SkRect } from \"../Rect\";\nimport type { SkRuntimeShaderBuilder } from \"../RuntimeEffect\";\nimport type { SkShader } from \"../Shader\";\n\nimport type { SkImageFilter, TileMode } from \"./ImageFilter\";\n\nexport enum ColorChannel {\n  R,\n  G,\n  B,\n  A,\n}\n\nexport interface ImageFilterFactory {\n  /**\n   * Offsets the input image\n   *\n   * @param dx - Offset along the X axis\n   * @param dy - Offset along the X axis\n   * @param input - if null, it will use the dynamic source image\n   */\n  MakeOffset(\n    dx: number,\n    dy: number,\n    input: SkImageFilter | null\n  ): SkImageFilter;\n  /**\n   * Spatially displace pixel values of the filtered image\n   *\n   * @param channelX - Color channel to be used along the X axis\n   * @param channelY - Color channel to be used along the Y axis\n   * @param scale - Scale factor to be used in the displacement\n   * @param in1 - Source image filter to use for the displacement\n   * @param input - if null, it will use the dynamic source image\n   */\n  MakeDisplacementMap(\n    channelX: ColorChannel,\n    channelY: ColorChannel,\n    scale: number,\n    in1: SkImageFilter,\n    input: SkImageFilter | null\n  ): SkImageFilter;\n  /**\n   * Transforms a shader into an impage filter\n   *\n   * @param shader - The Shader to be transformed\n   * @param input - if null, it will use the dynamic source image\n   */\n  MakeShader(shader: SkShader, input: SkImageFilter | null): SkImageFilter;\n  /**\n   * Create a filter that blurs its input by the separate X and Y sigmas. The provided tile mode\n   * is used when the blur kernel goes outside the input image.\n   *\n   * @param sigmaX - The Gaussian sigma value for blurring along the X axis.\n   * @param sigmaY - The Gaussian sigma value for blurring along the Y axis.\n   * @param mode\n   * @param input - if null, it will use the dynamic source image (e.g. a saved layer)\n   */\n  MakeBlur(\n    sigmaX: number,\n    sigmaY: number,\n    mode: TileMode,\n    input: SkImageFilter | null\n  ): SkImageFilter;\n\n  /**\n   * Create a filter that applies the color filter to the input filter results.\n   * @param cf\n   * @param input - if null, it will use the dynamic source image (e.g. a saved layer)\n   */\n  MakeColorFilter(\n    cf: SkColorFilter,\n    input: SkImageFilter | null\n  ): SkImageFilter;\n\n  /**\n   * Create a filter that composes 'inner' with 'outer', such that the results of 'inner' are\n   * treated as the source bitmap passed to 'outer'.\n   * If either param is null, the other param will be returned.\n   * @param outer\n   * @param inner - if null, it will use the dynamic source image (e.g. a saved layer)\n   */\n  MakeCompose(\n    outer: SkImageFilter | null,\n    inner: SkImageFilter | null\n  ): SkImageFilter;\n\n  /**\n   * Create a filter that draws a drop shadow under the input content.\n   * This filter produces an image that includes the inputs' content.\n   * @param dx The X offset of the shadow.\n   * @param dy\tThe Y offset of the shadow.\n   * @param sigmaX\tThe blur radius for the shadow, along the X axis.\n   * @param sigmaY\tThe blur radius for the shadow, along the Y axis.\n   * @param color\tThe color of the drop shadow.\n   * @param input\tThe input filter, or will use the source bitmap if this is null.\n   * @param cropRect\tOptional rectangle that crops the input and output.\n   */\n  MakeDropShadow: (\n    dx: number,\n    dy: number,\n    sigmaX: number,\n    sigmaY: number,\n    color: SkColor,\n    input: SkImageFilter | null,\n    cropRect?: SkRect\n  ) => SkImageFilter;\n  /**\n   * Create a filter that renders a drop shadow, in exactly the same manner as ::DropShadow, except\n   * that the resulting image does not include the input content.\n   * This allows the shadow and input to be composed by a filter DAG in a more flexible manner.\n   * @param dx The X offset of the shadow.\n   * @param dy\tThe Y offset of the shadow.\n   * @param sigmaX\tThe blur radius for the shadow, along the X axis.\n   * @param sigmaY\tThe blur radius for the shadow, along the Y axis.\n   * @param color\tThe color of the drop shadow.\n   * @param input\tThe input filter, or will use the source bitmap if this is null.\n   * @param cropRect\tOptional rectangle that crops the input and output.\n   */\n  MakeDropShadowOnly: (\n    dx: number,\n    dy: number,\n    sigmaX: number,\n    sigmaY: number,\n    color: SkColor,\n    input: SkImageFilter | null,\n    cropRect?: SkRect\n  ) => SkImageFilter;\n  /**\n   *  Create a filter that erodes each input pixel's channel values to the minimum channel value\n   *  within the given radii along the x and y axes.\n   *  @param radiusX  The distance to erode along the x axis to either side of each pixel.\n   *  @param radiusY  The distance to erode along the y axis to either side of each pixel.\n   *  @param input    The image filter that is eroded, using source bitmap if this is null.\n   *  @param cropRect Optional rectangle that crops the input and output.\n   */\n  MakeErode: (\n    rx: number,\n    ry: number,\n    input: SkImageFilter | null,\n    cropRect?: SkRect\n  ) => SkImageFilter;\n  /**\n   *  Create a filter that dilates each input pixel's channel values to the max value within the\n   *  given radii along the x and y axes.\n   *  @param radiusX  The distance to dilate along the x axis to either side of each pixel.\n   *  @param radiusY  The distance to dilate along the y axis to either side of each pixel.\n   *  @param input    The image filter that is dilated, using source bitmap if this is null.\n   *  @param cropRect Optional rectangle that crops the input and output.\n   */\n  MakeDilate: (\n    rx: number,\n    ry: number,\n    input: SkImageFilter | null,\n    cropRect?: SkRect\n  ) => SkImageFilter;\n  /**\n   *  This filter takes an SkBlendMode and uses it to composite the two filters together.\n   *  @param mode       The blend mode that defines the compositing operation\n   *  @param background The Dst pixels used in blending, if null the source bitmap is used.\n   *  @param foreground The Src pixels used in blending, if null the source bitmap is used.\n   *  @cropRect         Optional rectangle to crop input and output.\n   */\n  MakeBlend: (\n    mode: BlendMode,\n    background: SkImageFilter,\n    foreground: SkImageFilter | null,\n    cropRect?: SkRect\n  ) => SkImageFilter;\n  /**\n   *  Create a filter that fills the output with the per-pixel evaluation of the SkShader produced\n   *  by the SkRuntimeShaderBuilder. The shader is defined in the image filter's local coordinate\n   *  system, so it will automatically be affected by SkCanvas' transform.\n   *\n   *  @param builder         The builder used to produce the runtime shader, that will in turn\n   *                         fill the result image\n   *  @param childShaderName The name of the child shader defined in the builder that will be\n   *                         bound to the input param (or the source image if the input param\n   *                         is null).  If null the builder can have exactly one child shader,\n   *                         which automatically binds the input param.\n   *  @param input           The image filter that will be provided as input to the runtime\n   *                         shader. If null the implicit source image is used instead\n   */\n  MakeRuntimeShader: (\n    builder: SkRuntimeShaderBuilder,\n    childShaderName: string | null,\n    input: SkImageFilter | null\n  ) => SkImageFilter;\n}\n"],"mappings":"AASA,WAAYA,YAAY,0BAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAA,OAAZA,YAAY;AAAA","ignoreList":[]}