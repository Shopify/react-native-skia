{"version":3,"names":[],"sources":["ContourMeasure.tsx"],"sourcesContent":["import type { SkJSIInstance } from \"./JsiInstance\";\nimport type { SkPath } from \"./Path/Path\";\nimport type { SkPoint } from \"./Point\";\n\nexport interface PosTan {\n  px: number;\n  py: number;\n  tx: number;\n  ty: number;\n}\n\nexport interface SkContourMeasure extends SkJSIInstance<\"ContourMeasure\"> {\n  /**\n   * Returns the given position and tangent line for the distance on the given contour.\n   * The return value an array of 2 vectors: [position, tangent]\n   * @param distance - will be pinned between 0 and length().\n   */\n  getPosTan(distance: number): [position: SkPoint, tangent: SkPoint];\n\n  /**\n   * Returns an Path representing the segment of this contour.\n   * @param startD - will be pinned between 0 and length()\n   * @param stopD - will be pinned between 0 and length()\n   * @param startWithMoveTo\n   */\n  getSegment(startD: number, stopD: number, startWithMoveTo: boolean): SkPath;\n\n  /**\n   * Returns true if the contour is closed.\n   */\n  isClosed(): boolean;\n\n  /**\n   * Returns the length of this contour.\n   */\n  length(): number;\n}\n\nexport interface SkContourMeasureIter\n  extends SkJSIInstance<\"ContourMeasureIter\"> {\n  /**\n   *  Iterates through contours in path, returning a contour-measure object for each contour\n   *  in the path. Returns null when it is done.\n   *\n   *  See SkContourMeasure.h for more details.\n   */\n  next(): SkContourMeasure | null;\n}\n"],"mappings":"","ignoreList":[]}