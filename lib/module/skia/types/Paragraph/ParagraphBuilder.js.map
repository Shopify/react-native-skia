{"version":3,"names":["PlaceholderAlignment"],"sources":["ParagraphBuilder.ts"],"sourcesContent":["import type { SkJSIInstance } from \"../JsiInstance\";\nimport type { SkPaint } from \"../Paint\";\n\nimport type { SkParagraph } from \"./Paragraph\";\nimport type { SkParagraphStyle } from \"./ParagraphStyle\";\nimport type { SkTextStyle, TextBaseline } from \"./TextStyle\";\nimport type { SkTypefaceFontProvider } from \"./TypefaceFontProvider\";\n\nexport interface ParagraphBuilderFactory {\n  /**\n   * Creates a new ParagraphBuilder object from custom fonts.\n   * @param paragraphStyle Initial paragraph style\n   * @param typefaceProvider Typeface provider\n   */\n  Make(\n    paragraphStyle?: SkParagraphStyle,\n    typefaceProvider?: SkTypefaceFontProvider\n  ): SkParagraphBuilder;\n}\n\nexport enum PlaceholderAlignment {\n  /// Match the baseline of the placeholder with the baseline.\n  Baseline = 0,\n\n  /// Align the bottom edge of the placeholder with the baseline such that the\n  /// placeholder sits on top of the baseline.\n  AboveBaseline,\n\n  /// Align the top edge of the placeholder with the baseline specified in\n  /// such that the placeholder hangs below the baseline.\n  BelowBaseline,\n\n  /// Align the top edge of the placeholder with the top edge of the font.\n  /// When the placeholder is very tall, the extra space will hang from\n  /// the top and extend through the bottom of the line.\n  Top,\n\n  /// Align the bottom edge of the placeholder with the top edge of the font.\n  /// When the placeholder is very tall, the extra space will rise from\n  /// the bottom and extend through the top of the line.\n  Bottom,\n\n  /// Align the middle of the placeholder with the middle of the text. When the\n  /// placeholder is very tall, the extra space will grow equally from\n  /// the top and bottom of the line.\n  Middle,\n}\n\nexport interface SkParagraphBuilder extends SkJSIInstance<\"ParagraphBuilder\"> {\n  /**\n   * Creates a Paragraph object from the builder and the inputs given to the builder.\n   */\n  build(): SkParagraph;\n  /**\n   * Restores the builder to its initial empty state.\n   */\n  reset(): void;\n  /**\n   * Pushes a text-style to the builder\n   * @param style Style to push\n   * @param foregroundPaint Foreground paint object\n   * @param backgroundPaint Background paint object\n   * @returns The builder\n   */\n  pushStyle: (\n    style: SkTextStyle,\n    foregroundPaint?: SkPaint | undefined,\n    backgroundPaint?: SkPaint | undefined\n  ) => SkParagraphBuilder;\n  /**\n   * Pops the current text style from the builder\n   * @returns The builder\n   */\n  pop: () => SkParagraphBuilder;\n  /**\n   * Adds text to the builder\n   * @param text\n   * @returns The builder\n   */\n  addText: (text: string) => SkParagraphBuilder;\n  /**\n   * Pushes the information required to leave an open space.\n   * @param width\n   * @param height\n   * @param alignment\n   * @param baseline\n   * @param offset\n   */\n  addPlaceholder(\n    width?: number,\n    height?: number,\n    alignment?: PlaceholderAlignment,\n    baseline?: TextBaseline,\n    offset?: number\n  ): SkParagraphBuilder;\n}\n"],"mappings":"AAoBA,WAAYA,oBAAoB,0BAApBA,oBAAoB;EAC9B;EADUA,oBAAoB,CAApBA,oBAAoB;EAI9B;EACA;EALUA,oBAAoB,CAApBA,oBAAoB;EAQ9B;EACA;EATUA,oBAAoB,CAApBA,oBAAoB;EAY9B;EACA;EACA;EAdUA,oBAAoB,CAApBA,oBAAoB;EAiB9B;EACA;EACA;EAnBUA,oBAAoB,CAApBA,oBAAoB;EAsB9B;EACA;EACA;EAxBUA,oBAAoB,CAApBA,oBAAoB;EAAA,OAApBA,oBAAoB;AAAA","ignoreList":[]}