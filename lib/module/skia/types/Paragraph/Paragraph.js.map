{"version":3,"names":[],"sources":["Paragraph.ts"],"sourcesContent":["import type { SkCanvas } from \"../Canvas\";\nimport type { SkJSIInstance } from \"../JsiInstance\";\nimport type { SkRect } from \"../Rect\";\n\nimport type { TextDirection } from \"./ParagraphStyle\";\n\nexport interface SkRectWithDirection {\n  rect: SkRect;\n  direction: TextDirection;\n}\n\nexport interface SkParagraph extends SkJSIInstance<\"Paragraph\"> {\n  /**\n   * Calculates the position of the the glyphs in the paragraph\n   * @param width Max width of the paragraph\n   */\n  layout(width: number): void;\n  /**\n   * Paints the paragraph to the provded canvas\n   * @param canvas Canvas to paint into\n   * @param x X coordinate to paint at\n   * @param y Y coordinate to paint at\n   */\n  paint(canvas: SkCanvas, x: number, y: number): void;\n  /**\n   * Returns the height of the paragraph. This method requires the layout\n   * method to have been called first.\n   */\n  getHeight(): number;\n  /**\n   * Returns the max width of the paragraph. This method requires the layout\n   * method to have been called first.\n   */\n  getMaxWidth(): number;\n  /**\n   * Returns the minimum intrinsic width of the paragraph.\n   * The minimum intrinsic width is the width beyond which increasing the width of the paragraph\n   * does not decrease the height. This is effectively the width at which the paragraph\n   * can no longer wrap lines and is forced to overflow.\n   * This method requires the layout method to have been called first.\n   * @returns {number} The minimum intrinsic width of the paragraph.\n   */\n  getMinIntrinsicWidth(): number;\n  /**\n   * Returns the maximum intrinsic width of the paragraph.\n   * The maximum intrinsic width is the width at which the paragraph can layout its content without line breaks,\n   * meaning it's the width of the widest line or the widest word if the widest line is shorter than that.\n   * This width represents the ideal width for the paragraph to display all content in a single line without overflow.\n   * This method requires the layout method to have been called first.\n   * @returns {number} The maximum intrinsic width of the paragraph.\n   */\n  getMaxIntrinsicWidth(): number;\n\n  /**\n   * Returns the width of the longest line in the paragraph.\n   * This method requires the layout method to have been called first.\n   */\n  getLongestLine(): number;\n\n  /**\n   * Returns the index of the glyph at the given position. This method requires\n   * the layout method to have been called first.\n   * @param x X coordinate of the position\n   * @param y Y coordinate of the position\n   */\n  getGlyphPositionAtCoordinate(x: number, y: number): number;\n  /**\n   * Returns the bounding boxes of the glyphs in the given range. This method\n   * requires the layout method to have been called first.\n   * @param start Start index of the range\n   * @param end End index of the range\n   */\n  getRectsForRange(start: number, end: number): SkRect[];\n  /**\n   * Returns the bounding boxes for all lines in the paragraph. This method\n   * requires the layout method to have been called first.\n   */\n  getLineMetrics(): Array<SkRect>;\n  /**\n   * Returns a list of rects with direction info for the placeholders added\n   * to the paragraph.\n   */\n  getRectsForPlaceholders(): SkRectWithDirection[];\n}\n"],"mappings":"","ignoreList":[]}