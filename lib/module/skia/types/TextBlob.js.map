{"version":3,"names":[],"sources":["TextBlob.ts"],"sourcesContent":["import type { SkJSIInstance } from \"./JsiInstance\";\nimport type { SkFont } from \"./Font/Font\";\nimport type { SkRSXform } from \"./RSXform\";\n\nexport type SkTextBlob = SkJSIInstance<\"TextBlob\">;\n\nexport interface TextBlobFactory {\n  /**\n   * Return a TextBlob with a single run of text.\n   *\n   * It uses the default character-to-glyph mapping from the typeface in the font.\n   * It does not perform typeface fallback for characters not found in the Typeface.\n   * It does not perform kerning or other complex shaping; glyphs are positioned based on their\n   * default advances.\n   * @param str\n   * @param font\n   */\n  MakeFromText(str: string, font: SkFont): SkTextBlob;\n  /**\n   * Return a TextBlob with a single run of text.\n   *\n   * It does not perform typeface fallback for characters not found in the Typeface.\n   * It does not perform kerning or other complex shaping; glyphs are positioned based on their\n   * default advances.\n   * @param glyphs - if using Malloc'd array, be sure to use CanvasKit.MallocGlyphIDs().\n   * @param font\n   */\n  MakeFromGlyphs(glyphs: number[], font: SkFont): SkTextBlob;\n\n  /**\n   * Returns a TextBlob built from a single run of text with rotation, scale, and translations.\n   *\n   * It uses the default character-to-glyph mapping from the typeface in the font.\n   * @param str\n   * @param rsxforms\n   * @param font\n   */\n  MakeFromRSXform(str: string, rsxforms: SkRSXform[], font: SkFont): SkTextBlob;\n\n  /**\n   * Returns a TextBlob built from a single run of text with rotation, scale, and translations.\n   *\n   * @param glyphs - if using Malloc'd array, be sure to use CanvasKit.MallocGlyphIDs().\n   * @param rsxforms\n   * @param font\n   */\n  MakeFromRSXformGlyphs(\n    glyphs: number[],\n    rsxforms: SkRSXform[],\n    font: SkFont\n  ): SkTextBlob;\n}\n"],"mappings":"","ignoreList":[]}