{"version":3,"names":[],"sources":["Surface.ts"],"sourcesContent":["import type { SkImage } from \"../Image\";\nimport type { SkCanvas } from \"../Canvas\";\nimport type { SkJSIInstance } from \"../JsiInstance\";\nimport type { SkRect } from \"../Rect\";\n\nexport interface SkSurface extends SkJSIInstance<\"Surface\"> {\n  /** Returns Canvas that draws into the surface. Subsequent calls return the\n     same Canvas. Canvas returned is managed and owned by Surface, and is\n     deleted when Surface is deleted.\n\n      @return  drawing Canvas for Surface\n\n      example: https://fiddle.skia.org/c/@Surface_getCanvas\n  */\n  getCanvas(): SkCanvas;\n\n  /**\n   * Returns the backend texture of the surface.\n   * The returned object can be used to create a Skia Image object.\n   * The returned object is backend specific and should be used with caution.\n   * It is the caller's responsibility to ensure that the texture is not used after the surface is deleted\n   * or draw operations are performed on the surface.\n   * The returned object may be null if the surface does not have a backend texture.\n   *\n   * @return backend texture of the surface or null\n   */\n  getNativeTextureUnstable(): unknown;\n\n  /** Returns Image capturing Surface contents. Subsequent drawing to\n     Surface contents are not captured.\n\n      @param bounds A rectangle specifying the subset of the surface that\n   is of interest.\n      @return  Image initialized with Surface contents\n\n      example: https://fiddle.skia.org/c/@Surface_makeImageSnapshot\n  */\n  makeImageSnapshot(bounds?: SkRect): SkImage;\n\n  /**\n   * Make sure any queued draws are sent to the screen or the GPU.\n   */\n  flush(): void;\n\n  /**\n   * Returns the possibly scaled width of the surface.\n   */\n  width(): number;\n\n  /**\n   * Returns the possibly scaled height of the surface.\n   */\n  height(): number;\n}\n"],"mappings":"","ignoreList":[]}