{"version":3,"names":[],"sources":["Picture.ts"],"sourcesContent":["import type { FilterMode } from \"../Image\";\nimport type { TileMode } from \"../ImageFilter\";\nimport type { SkRect } from \"../Rect\";\nimport type { SkShader } from \"../Shader\";\nimport type { SkMatrix } from \"../Matrix\";\nimport type { SkJSIInstance } from \"../JsiInstance\";\n\nexport interface SkPicture extends SkJSIInstance<\"Picture\"> {\n  /**\n   *  Returns a new shader that will draw with this picture.\n   *\n   *  @param tmx  The tiling mode to use when sampling in the x-direction.\n   *  @param tmy  The tiling mode to use when sampling in the y-direction.\n   *  @param mode How to filter the tiles\n   *  @param localMatrix Optional matrix used when sampling\n   *  @param tileRect The tile rectangle in picture coordinates: this represents the subset\n   *              (or superset) of the picture used when building a tile. It is not\n   *              affected by localMatrix and does not imply scaling (only translation\n   *              and cropping). If null, the tile rect is considered equal to the picture\n   *              bounds.\n   */\n  makeShader(\n    tmx: TileMode,\n    tmy: TileMode,\n    mode: FilterMode,\n    localMatrix?: SkMatrix,\n    tileRect?: SkRect\n  ): SkShader;\n\n  /**\n   * Returns the serialized format of this SkPicture. The format may change at anytime and\n   * no promises are made for backwards or forward compatibility.\n   */\n  serialize(): Uint8Array | null;\n}\n"],"mappings":"","ignoreList":[]}