{"version":3,"names":[],"sources":["ShaderFactory.ts"],"sourcesContent":["import type { TileMode } from \"../ImageFilter\";\nimport type { SkPoint } from \"../Point\";\nimport type { SkMatrix } from \"../Matrix\";\nimport type { SkColor } from \"../Color\";\nimport type { BlendMode } from \"../Paint/BlendMode\";\n\nimport type { SkShader } from \"./Shader\";\n\nexport interface ShaderFactory {\n  /**\n   * Returns a shader that generates a linear gradient between the two specified points.\n   * See SkGradientShader.h for more.\n   * @param start\n   * @param end\n   * @param colors - colors to be distributed between start and end.\n   * @param pos - May be null. The relative positions of colors. If supplied must be same length\n   *              as colors.\n   * @param mode\n   * @param localMatrix\n   * @param flags - By default gradients will interpolate their colors in unpremul space\n   *                and then premultiply each of the results. By setting this to 1, the\n   *                gradients will premultiply their colors first, and then interpolate\n   *                between them.\n   */\n  MakeLinearGradient(\n    start: SkPoint,\n    end: SkPoint,\n    colors: SkColor[],\n    pos: number[] | null,\n    mode: TileMode,\n    localMatrix?: SkMatrix,\n    flags?: number\n    // colorSpace: ColorSpace\n  ): SkShader;\n\n  /**\n   * Returns a shader that generates a radial gradient given the center and radius.\n   * See SkGradientShader.h for more.\n   * @param center\n   * @param radius\n   * @param colors - colors to be distributed between the center and edge.\n   * @param pos - May be null. The relative positions of colors. If supplied must be same length\n   *              as colors. Range [0.0, 1.0]\n   * @param mode\n   * @param localMatrix\n   * @param flags - 0 to interpolate colors in unpremul, 1 to interpolate colors in premul.\n   */\n  MakeRadialGradient(\n    center: SkPoint,\n    radius: number,\n    colors: SkColor[],\n    pos: number[] | null,\n    mode: TileMode,\n    localMatrix?: SkMatrix,\n    flags?: number\n    // colorSpace?: ColorSpace\n  ): SkShader;\n\n  /**\n   * Returns a shader that generates a conical gradient given two circles.\n   * See SkGradientShader.h for more.\n   * @param start\n   * @param startRadius\n   * @param end\n   * @param endRadius\n   * @param colors\n   * @param pos\n   * @param mode\n   * @param localMatrix\n   * @param flags\n   */\n  MakeTwoPointConicalGradient(\n    start: SkPoint,\n    startRadius: number,\n    end: SkPoint,\n    endRadius: number,\n    colors: SkColor[],\n    pos: number[] | null,\n    mode: TileMode,\n    localMatrix?: SkMatrix,\n    flags?: number\n    //  colorSpace?: ColorSpace\n  ): SkShader;\n\n  /**\n   * Returns a shader that generates a sweep gradient given a center.\n   * See SkGradientShader.h for more.\n   * @param cx\n   * @param cy\n   * @param colors - colors to be distributed around the center, within the provided angles.\n   * @param pos - May be null. The relative positions of colors. If supplied must be same length\n   *              as colors. Range [0.0, 1.0]\n   * @param mode\n   * @param localMatrix\n   * @param flags - 0 to interpolate colors in unpremul, 1 to interpolate colors in premul.\n   * @param startAngle - angle corresponding to 0.0. Defaults to 0 degrees.\n   * @param endAngle - angle corresponding to 1.0. Defaults to 360 degrees.\n   */\n  MakeSweepGradient(\n    cx: number,\n    cy: number,\n    colors: SkColor[],\n    pos: number[] | null,\n    mode: TileMode,\n    localMatrix?: SkMatrix | null,\n    flags?: number,\n    startAngleInDegrees?: number,\n    endAngleInDegrees?: number\n    //  colorSpace?: ColorSpace\n  ): SkShader;\n\n  /**\n   * Returns a shader with Perlin Turbulence.\n   * See SkPerlinNoiseShader.h for more details\n   * @param baseFreqX - base frequency in the X direction; range [0.0, 1.0]\n   * @param baseFreqY - base frequency in the Y direction; range [0.0, 1.0]\n   * @param octaves\n   * @param seed\n   * @param tileW - if this and tileH are non-zero, the frequencies will be modified so that the\n   *                noise will be tileable for the given size.\n   * @param tileH - if this and tileW are non-zero, the frequencies will be modified so that the\n   *                noise will be tileable for the given size.\n   */\n  MakeTurbulence(\n    baseFreqX: number,\n    baseFreqY: number,\n    octaves: number,\n    seed: number,\n    tileW: number,\n    tileH: number\n  ): SkShader;\n\n  /**\n   * Returns a shader with Perlin Fractal Noise.\n   * See SkPerlinNoiseShader.h for more details\n   * @param baseFreqX - base frequency in the X direction; range [0.0, 1.0]\n   * @param baseFreqY - base frequency in the Y direction; range [0.0, 1.0]\n   * @param octaves\n   * @param seed\n   * @param tileW - if this and tileH are non-zero, the frequencies will be modified so that the\n   *                noise will be tileable for the given size.\n   * @param tileH - if this and tileW are non-zero, the frequencies will be modified so that the\n   *                noise will be tileable for the given size.\n   */\n  MakeFractalNoise(\n    baseFreqX: number,\n    baseFreqY: number,\n    octaves: number,\n    seed: number,\n    tileW: number,\n    tileH: number\n  ): SkShader;\n\n  /**\n   * Returns a shader that combines the given shaders with a BlendMode.\n   * @param mode\n   * @param one\n   * @param two\n   */\n  MakeBlend(mode: BlendMode, one: SkShader, two: SkShader): SkShader;\n\n  /**\n   * Returns a shader with a given color and colorspace.\n   * @param color\n   */\n  MakeColor(\n    color: SkColor //,space: ColorSpace\n  ): SkShader;\n}\n"],"mappings":"","ignoreList":[]}