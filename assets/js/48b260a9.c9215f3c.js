"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3115],{1184:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>r});var n=a(4041);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}},2616:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"getting-started/headless","title":"Headless","description":"Thanks to its offscreen capabilities, React Native Skia can run on Node.","source":"@site/docs/getting-started/headless.md","sourceDirName":"getting-started","slug":"/getting-started/headless","permalink":"/react-native-skia/docs/getting-started/headless","draft":false,"unlisted":false,"editUrl":"https://github.com/shopify/react-native-skia/edit/main/docs/docs/getting-started/headless.md","tags":[],"version":"current","frontMatter":{"id":"headless","title":"Headless","sidebar_label":"Headless","slug":"/getting-started/headless"},"sidebar":"tutorialSidebar","previous":{"title":"Web","permalink":"/react-native-skia/docs/getting-started/web"},"next":{"title":"Bundle Size","permalink":"/react-native-skia/docs/getting-started/bundle-size"}}');var s=a(1085),i=a(1184);const o={id:"headless",title:"Headless",sidebar_label:"Headless",slug:"/getting-started/headless"},r=void 0,c={},l=[{value:"Hello World",id:"hello-world",level:2},{value:"GPU Acceleration",id:"gpu-acceleration",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Thanks to its offscreen capabilities, React Native Skia can run on Node.\nThis means that you can use the Skia API to draw things that can be encoded and saved as images.\nBy default, drawings will be executed on the CPU but it is possible to also use ",(0,s.jsx)(t.a,{href:"#gpu-acceleration",children:"GPU Acceleration"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"hello-world",children:"Hello World"}),"\n",(0,s.jsx)(t.p,{children:"You will notice in the example below that the import URL looks different than the one used in React Native. There are two reasons for it. First, because Node programs don't rely on module bundlers such as Webpack, you will need to use the commonjs build of React Native Skia. Finally, we want to import the Skia APIs we need on Node without importing the one that rely on pure React Native APIs."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'import { LoadSkiaWeb } from "@shopify/react-native-skia/lib/commonjs/web/LoadSkiaWeb";\nimport { Circle, drawOffscreen, getSkiaExports, Group, makeOffscreenSurface } from "@shopify/react-native-skia/lib/commonjs/headless";\n\n(async () => {\n  const width = 256;\n  const height = 256;\n  const size = 60;\n  const r = size * 0.33;\n  await LoadSkiaWeb();\n  // Once that CanvasKit is loaded, you can access Skia via getSkiaExports()\n  // Alternatively you can do const {Skia} = require("@shopify/react-native-skia")\n  const {Skia} = getSkiaExports();\n  using surface = makeOffscreenSurface(width, height);\n  using image = await drawOffscreen(surface,\n    <Group blendMode="multiply">\n      <Circle cx={r} cy={r} r={r} color="cyan" />\n      <Circle cx={size - r} cy={r} r={r} color="magenta" />\n      <Circle\n        cx={size/2}\n        cy={size - r}\n        r={r}\n        color="yellow"\n      />\n    </Group>);\n  console.log(image.encodeToBase64());\n})();\n'})}),"\n",(0,s.jsx)(t.h2,{id:"gpu-acceleration",children:"GPU Acceleration"}),"\n",(0,s.jsxs)(t.p,{children:["React Native Skia relies on the ",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas",children:"OffscreenCanvas API"})," to support GPU-Accelerated offscreen surfaces.\nThis means, that to benefit from the GPU acceleration, you will need to provide a polyfill of the ",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas",children:"OffscreenCanvas API"})," on Node.\nFor example, ",(0,s.jsx)(t.a,{href:"https://gist.github.com/wcandillon/a46e922910a814139758d6eda9d99ff8",children:"here"})," is an OffScreenCanvas polyfill implementation that relies on WebGL using ",(0,s.jsx)(t.a,{href:"https://github.com/stackgl/headless-gl",children:"headless-gl"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);