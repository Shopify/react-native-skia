"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3706],{1184:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var s=n(4041);const l={},i=s.createContext(l);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),s.createElement(i.Provider,{value:t},e.children)}},5217:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"image-filters/displacement-map","title":"Displacement Map","description":"The displacement map image filter is identical to its SVG counterpart. The pixel values from the child image are used to displace the filtered image spatially.","source":"@site/docs/image-filters/displacement-map.md","sourceDirName":"image-filters","slug":"/image-filters/displacement-map","permalink":"/react-native-skia/docs/image-filters/displacement-map","draft":false,"unlisted":false,"editUrl":"https://github.com/shopify/react-native-skia/edit/main/docs/docs/image-filters/displacement-map.md","tags":[],"version":"current","frontMatter":{"id":"displacement-map","title":"Displacement Map","sidebar_label":"Displacement Map","slug":"/image-filters/displacement-map"},"sidebar":"tutorialSidebar","previous":{"title":"Blur","permalink":"/react-native-skia/docs/image-filters/blur"},"next":{"title":"Offset","permalink":"/react-native-skia/docs/image-filters/offset"}}');var l=n(1085),i=n(1184);const a={id:"displacement-map",title:"Displacement Map",sidebar_label:"Displacement Map",slug:"/image-filters/displacement-map"},c=void 0,r={},d=[{value:"Example",id:"example",level:2}];function o(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(t.p,{children:["The displacement map image filter is identical to its ",(0,l.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDisplacementMap",children:"SVG counterpart"}),". The pixel values from the child image are used to displace the filtered image spatially.\nThe formula for the transformation looks like this:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"P'(x,y) \u2190 P( x + scale * (XC(x,y) - 0.5), y + scale * (YC(x,y) - 0.5))\n"})}),"\n",(0,l.jsxs)(t.p,{children:["where ",(0,l.jsx)(t.code,{children:"P(x,y)"})," is the child image, and ",(0,l.jsx)(t.code,{children:"P'(x,y)"})," is the destination. ",(0,l.jsx)(t.code,{children:"XC(x,y)"})," and ",(0,l.jsx)(t.code,{children:"YC(x,y)"})," are the component values of the channel designated by ",(0,l.jsx)(t.code,{children:"channelX"})," and ",(0,l.jsx)(t.code,{children:"channelY"}),"."]}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"channelX"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"ColorChannel"})}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Color channel to be used along the X axis. Possible values are ",(0,l.jsx)(t.code,{children:"r"}),", ",(0,l.jsx)(t.code,{children:"g"}),", ",(0,l.jsx)(t.code,{children:"b"}),", or ",(0,l.jsx)(t.code,{children:"a"})]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"channelY"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"ColorChannel"})}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Color channel to be used along the Y axis. Possible values are ",(0,l.jsx)(t.code,{children:"r"}),", ",(0,l.jsx)(t.code,{children:"g"}),", ",(0,l.jsx)(t.code,{children:"b"}),", or ",(0,l.jsx)(t.code,{children:"a"})]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"scale"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"number"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Displacement scale factor to be used"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"children?"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"ImageFilter"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Optional image filter to be applied first."})]})]})]}),"\n",(0,l.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,l.jsxs)(t.p,{children:["We use a ",(0,l.jsx)(t.a,{href:"/docs/shaders/perlin-noise",children:"Perlin Noise"})," as a displacement map in the example below."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import { Canvas, Image, Turbulence, DisplacementMap, useImage } from "@shopify/react-native-skia";\n\nconst Filter = () => {\n  const image = useImage(require("./assets/oslo.jpg"));\n  if (!image) {\n    return null;\n  }\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Image\n        image={image}\n        x={0}\n        y={0}\n        width={256}\n        height={256}\n        fit="cover"\n      >\n        <DisplacementMap channelX="g" channelY="a" scale={20}>\n          <Turbulence freqX={0.01} freqY={0.05} octaves={2} seed={2} />\n        </DisplacementMap>\n      </Image>\n    </Canvas>\n  );\n};\n'})}),"\n",(0,l.jsx)("img",{src:n(7977).A,width:"256",height:"256"})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},7977:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/displacement-map-fda9ee34c828cfd9c7c180068676af0b.png"}}]);