"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9771],{1184:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var i=n(4041);const r={},a=i.createContext(r);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:t},e.children)}},5204:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/blurred-picture-3a3a62f1f9dd43fa34355c6344b70181.png"},5402:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/simple-picture-5797527cf2ba47dade1fac2f1a1fcf43.png"},8720:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"shapes/pictures","title":"Pictures","description":"A Picture renders a previously recorded list of drawing operations on the canvas. The picture is immutable and cannot be edited or changed after it has been created. It can be used multiple times in any canvas.","source":"@site/docs/shapes/pictures.md","sourceDirName":"shapes","slug":"/shapes/pictures","permalink":"/react-native-skia/docs/shapes/pictures","draft":false,"unlisted":false,"editUrl":"https://github.com/shopify/react-native-skia/edit/main/docs/docs/shapes/pictures.md","tags":[],"version":"current","frontMatter":{"id":"pictures","title":"Pictures","sidebar_label":"Pictures","slug":"/shapes/pictures"},"sidebar":"tutorialSidebar","previous":{"title":"Patch","permalink":"/react-native-skia/docs/shapes/patch"},"next":{"title":"Image","permalink":"/react-native-skia/docs/images"}}');var r=n(1085),a=n(1184);const s={id:"pictures",title:"Pictures",sidebar_label:"Pictures",slug:"/shapes/pictures"},c=void 0,l={},o=[{value:"Hello World",id:"hello-world",level:2},{value:"Applying Effects",id:"applying-effects",level:2},{value:"Serialization",id:"serialization",level:2},{value:"Instance Methods",id:"instance-methods",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"A Picture renders a previously recorded list of drawing operations on the canvas. The picture is immutable and cannot be edited or changed after it has been created. It can be used multiple times in any canvas."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"picture"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"SkPicture"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Picture to render"})]})})]}),"\n",(0,r.jsx)(t.h2,{id:"hello-world",children:"Hello World"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import React, { useMemo } from "react";\nimport {\n  createPicture,\n  Canvas,\n  Picture,\n  Skia,\n  Group,\n  BlendMode\n} from "@shopify/react-native-skia";\n\nexport const HelloWorld = () => {\n  // Create a picture\n  const picture = useMemo(() => createPicture(\n    (canvas) => {\n      const size = 256;\n      const r = 0.33 * size;\n      const paint = Skia.Paint();\n      paint.setBlendMode(BlendMode.Multiply);\n\n      paint.setColor(Skia.Color("cyan"));\n      canvas.drawCircle(r, r, r, paint);\n\n      paint.setColor(Skia.Color("magenta"));\n      canvas.drawCircle(size - r, r, r, paint);\n\n      paint.setColor(Skia.Color("yellow"));\n      canvas.drawCircle(size / 2, size - r, r, paint);\n    }\n  ), []);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Picture picture={picture} />\n    </Canvas>\n  );\n};\n'})}),"\n",(0,r.jsx)("img",{src:n(5402).A,width:"256",height:"256"}),"\n",(0,r.jsx)(t.h2,{id:"applying-effects",children:"Applying Effects"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"Picture"})," component doesn't follow the same painting rules as other components.\nHowever you can apply effets using the ",(0,r.jsx)(t.code,{children:"layer"})," property.\nFor instance, in the example below, we apply a blur image filter."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import React from "react";\nimport { Canvas, Skia, Group, Paint, Blur, createPicture, BlendMode, Picture } from "@shopify/react-native-skia";\n\nconst width = 256;\nconst height = 256;\n\nexport const Demo = () => {\n  const picture = createPicture(\n    (canvas) => {\n      const size = 256;\n      const r = 0.33 * size;\n      const paint = Skia.Paint();\n      paint.setBlendMode(BlendMode.Multiply);\n\n      paint.setColor(Skia.Color("cyan"));\n      canvas.drawCircle(r, r, r, paint);\n\n      paint.setColor(Skia.Color("magenta"));\n      canvas.drawCircle(size - r, r, r, paint);\n\n      paint.setColor(Skia.Color("yellow"));\n      canvas.drawCircle(size / 2, size - r, r, paint);\n    }\n  );\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group layer={<Paint><Blur blur={10} /></Paint>}>\n        <Picture picture={picture} />\n      </Group>\n    </Canvas>\n  );\n};\n'})}),"\n",(0,r.jsx)("img",{src:n(5204).A,width:"256",height:"256"}),"\n",(0,r.jsx)(t.h2,{id:"serialization",children:"Serialization"}),"\n",(0,r.jsxs)(t.p,{children:["You can serialize a picture to a byte array.\nSerialized pictures are only compatible with the version of Skia it was created with.\nYou can use serialized pictures with the ",(0,r.jsx)(t.a,{href:"https://skia.org/docs/dev/tools/debugger/",children:"Skia debugger"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import React, { useMemo } from "react";\nimport {\n  createPicture,\n  Canvas,\n  Picture,\n  Skia,\n  Group,\n} from "@shopify/react-native-skia";\n\nexport const PictureExample = () => {\n  // Create picture\n  const picture = useMemo(() => createPicture(\n    (canvas) => {\n      const paint = Skia.Paint();\n      paint.setColor(Skia.Color("pink"));\n      canvas.drawRect({ x: 0, y: 0, width: 100, height: 100 }, paint);\n\n      const circlePaint = Skia.Paint();\n      circlePaint.setColor(Skia.Color("orange"));\n      canvas.drawCircle(50, 50, 50, circlePaint);\n    },\n    { width: 100, height: 100 },\n  ), []);\n\n  // Serialize the picture\n  const serialized = useMemo(() => picture.serialize(), [picture]);\n\n  // Create a copy from serialized data\n  const copyOfPicture = useMemo(\n    () => (serialized ? Skia.Picture.MakePicture(serialized) : null),\n    [serialized]\n  );\n\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Picture picture={picture} />\n      <Group transform={[{ translateX: 200 }]}>\n        {copyOfPicture && <Picture picture={copyOfPicture} />}\n      </Group>\n    </Canvas>\n  );\n};\n'})}),"\n",(0,r.jsx)(t.h2,{id:"instance-methods",children:"Instance Methods"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"makeShader"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Returns a new shader that will draw with this picture."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"serialize"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Returns a UInt8Array representing the drawing operations stored in the image."})]})]})]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);