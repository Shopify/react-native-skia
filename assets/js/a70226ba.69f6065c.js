"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5222],{1184:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var r=n(4041);const a={},o=r.createContext(a);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:t},e.children)}},1192:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/boundingbox-node-7cba8ca04489633d05e50545143ff9f7.png"},1441:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/hello-world-ios-db12b53b54d359e583a43ab302b9e00a.png"},2471:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/blurred-paragraph-node-f44d86191ead4cb83eda26e5fcce1262.png"},5010:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/font-style-node-f63f49490c80a589ed3c8cf5ba106939.png"},7707:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/background-node-d8551da7efc3c5b3245ab8d7b199a91b.png"},8759:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/hello-world-android-1dd8e833e4040eb0a5d0359b226c1ea1.png"},9739:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"text/paragraph","title":"Paragraph","description":"React Native Skia offers an API to perform text layouts using the Skia Paragraph API.","source":"@site/docs/text/paragraph.md","sourceDirName":"text","slug":"/text/paragraph","permalink":"/react-native-skia/docs/text/paragraph","draft":false,"unlisted":false,"editUrl":"https://github.com/shopify/react-native-skia/edit/main/docs/docs/text/paragraph.md","tags":[],"version":"current","frontMatter":{"id":"paragraph","title":"Paragraph","sidebar_label":"Paragraph","slug":"/text/paragraph"},"sidebar":"tutorialSidebar","previous":{"title":"Skottie","permalink":"/react-native-skia/docs/skottie"},"next":{"title":"Text","permalink":"/react-native-skia/docs/text/text"}}');var a=n(1085),o=n(1184);const s={id:"paragraph",title:"Paragraph",sidebar_label:"Paragraph",slug:"/text/paragraph"},i=void 0,l={},d=[{value:"Hello World",id:"hello-world",level:2},{value:"Using Paints",id:"using-paints",level:2},{value:"Applying Effects",id:"applying-effects",level:3},{value:"Result",id:"result",level:3},{value:"Paragraph Bounding Box",id:"paragraph-bounding-box",level:2},{value:"Fonts",id:"fonts",level:2},{value:"Styling Paragraphs",id:"styling-paragraphs",level:2},{value:"Text Style Properties",id:"text-style-properties",level:2},{value:"Result",id:"result-1",level:4}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"React Native Skia offers an API to perform text layouts using the Skia Paragraph API."}),"\n",(0,a.jsx)(t.h2,{id:"hello-world",children:"Hello World"}),"\n",(0,a.jsx)(t.p,{children:"In the example below, we create a simple paragraph based on custom fonts.\nThe emojis will be renderer using the emoji font available on the platform.\nOther system fonts are available as well."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import { useMemo } from "react";\nimport { Paragraph, Skia, useFonts, TextAlign, Canvas } from "@shopify/react-native-skia";\n\nconst MyParagraph = () => {\n  const customFontMgr = useFonts({\n    Roboto: [\n      require("path/to/Roboto-Regular.ttf"),\n      require("path/to/Roboto-Medium.ttf")\n    ]\n  });\n\n  const paragraph = useMemo(() => {\n    // Are the font loaded already?\n    if (!customFontMgr) {\n      return null;\n    }\n    const paragraphStyle = {\n      textAlign: TextAlign.Center\n    };\n    const textStyle = {\n      color: Skia.Color("black"),\n      fontFamilies: ["Roboto"],\n      fontSize: 50,\n    };\n    return Skia.ParagraphBuilder.Make(paragraphStyle, customFontMgr)\n      .pushStyle(textStyle)\n      .addText("Say Hello to ")\n      .pushStyle({ ...textStyle, fontStyle: { weight: 500 } })\n      .addText("Skia \ud83c\udfa8")\n      .pop()\n      .build();\n  }, [customFontMgr]);\n\n  // Render the paragraph\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Paragraph paragraph={paragraph} x={0} y={0} width={300} />\n    </Canvas>\n  );\n};\n'})}),"\n",(0,a.jsx)(t.p,{children:"Below is the result on Android (left) and iOS (right)."}),"\n",(0,a.jsx)("img",{src:n(8759).A,width:"256",height:"256"}),"\n",(0,a.jsx)("img",{src:n(1441).A,width:"256",height:"256"}),"\n",(0,a.jsxs)(t.p,{children:["On Web, you will need to provide you own emoji font (",(0,a.jsx)(t.a,{href:"https://fonts.google.com/noto/specimen/Noto+Color+Emoji",children:"NotoColorEmoji"})," for instance) and add it to the list of font families."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import { useFonts, Skia } from "@shopify/react-native-skia";\n\nconst customFontMgr = useFonts({\n  Roboto: [\n    require("path/to/Roboto-Regular.ttf"),\n    require("path/to/Roboto-Medium.ttf")\n  ],\n  // Only load the emoji font on Web\n  Noto: [\n    require("path/to/NotoColorEmoji.ttf")\n  ]\n});\n\n// We add Noto to the list of font families\nconst textStyle = {\n  color: Skia.Color("black"),\n  fontFamilies: ["Roboto", "Noto"],\n  fontSize: 50,\n};\n'})}),"\n",(0,a.jsx)(t.h2,{id:"using-paints",children:"Using Paints"}),"\n",(0,a.jsx)(t.p,{children:"You can use paint objects for the foreground and the background of a text style."}),"\n",(0,a.jsx)("img",{src:n(7707).A,width:"256",height:"256"}),"\n",(0,a.jsx)(t.p,{children:"Below we use a foreground and a background paint on a text style:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import { useMemo } from "react";\nimport { Paragraph, Skia, useFonts, Canvas, Rect, TileMode } from "@shopify/react-native-skia";\n\n// Our background shader\nconst source = Skia.RuntimeEffect.Make(`\nuniform vec4 position;\nuniform vec4 colors[4];\n\nvec4 main(vec2 pos) {\n  vec2 uv = (pos - vec2(position.x, position.y))/vec2(position.z, position.w);\n  vec4 colorA = mix(colors[0], colors[1], uv.x);\n  vec4 colorB = mix(colors[2], colors[3], uv.x);\n  return mix(colorA, colorB, uv.y);\n}`)!;\n\n// Define an array of colors for the gradient to be used in shader uniform\nconst colors = [\n  // #dafb61\n  0.85, 0.98, 0.38, 1.0,\n  // #61dafb\n  0.38, 0.85, 0.98, 1.0,\n  // #fb61da\n  0.98, 0.38, 0.85, 1.0,\n  // #61fbcf\n  0.38, 0.98, 0.81, 1.0\n];\n\nconst MyParagraph = () => {\n  const paragraph = useMemo(() => {\n\n    // Create a background paint.\n    const backgroundPaint = Skia.Paint();\n    backgroundPaint.setShader(\n      source.makeShader([0, 0, 256, 256, ...colors])\n    );\n\n    // Create a foreground paint. We use a radial gradient.\n    const foregroundPaint = Skia.Paint();\n    foregroundPaint.setShader(\n      Skia.Shader.MakeRadialGradient(\n        { x: 0, y: 0 },\n        256,\n        [Skia.Color("magenta"), Skia.Color("yellow")],\n        null,\n        TileMode.Clamp\n      )\n    );\n\n    const para = Skia.ParagraphBuilder.Make()\n     .pushStyle(\n        {\n          fontFamilies: ["Roboto"],\n          fontSize: 72,\n          fontStyle: { weight: 500 },\n          color: Skia.Color("black"),\n        },\n        foregroundPaint,\n        backgroundPaint\n      )\n      .addText("Say Hello to React Native Skia")\n      .pop()\n      .build();\n    return para;\n  }, []);\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Paragraph paragraph={paragraph} x={0} y={0} width={256} />\n    </Canvas>\n  );\n};\n'})}),"\n",(0,a.jsx)(t.h3,{id:"applying-effects",children:"Applying Effects"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"Paragraph"})," component doesn't follow the same painting rules as other components.\nHowever you can apply effets using the ",(0,a.jsx)(t.code,{children:"layer"})," property.\nFor instance, in the example below, we apply a blur image filter."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import React from "react";\nimport { Canvas, Skia, Group, Paint, Blur, Paragraph } from "@shopify/react-native-skia";\n\nconst width = 256;\nconst height = 256;\n\nexport const Demo = () => {\n  const paragraph = Skia.ParagraphBuilder.Make()\n          .pushStyle({\n            color: Skia.Color("black"),\n            fontSize: 25,\n          })\n          .addText("Hello Skia")\n          .build();\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group layer={<Paint><Blur blur={10} /></Paint>}>\n        <Paragraph paragraph={paragraph} x={0} y={0} width={width} />\n      </Group>\n    </Canvas>\n  );\n};\n'})}),"\n",(0,a.jsx)(t.h3,{id:"result",children:"Result"}),"\n",(0,a.jsx)("img",{src:n(2471).A,width:"256",height:"256"}),"\n",(0,a.jsx)(t.h2,{id:"paragraph-bounding-box",children:"Paragraph Bounding Box"}),"\n",(0,a.jsxs)(t.p,{children:["Before getting the paragraph height and width, you need to compute its layout using ",(0,a.jsx)(t.code,{children:"layout()"})," and once done, you can invoke ",(0,a.jsx)(t.code,{children:"getHeight()"})," for the height and ",(0,a.jsx)(t.code,{children:"getLongestLine()"})," for the width."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import { useMemo } from "react";\nimport { Paragraph, Skia, useFonts, Canvas, Rect } from "@shopify/react-native-skia";\n\nconst MyParagraph = () => {\n  const paragraph = useMemo(() => {\n    const para = Skia.ParagraphBuilder.Make()\n      .addText("Say Hello to React Native Skia")\n      .build();\n    // Calculate the layout\n    para.layout(200);\n    return para;\n  }, []);\n  // Now the paragraph height is available\n  const height = paragraph.getHeight();\n  const width = paragraph.getLongestLine();\n  // Render the paragraph\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      {/* Maximum paragraph width */}\n      <Rect x={0} y={0} width={200} height={256} color="magenta" />\n      {/* Paragraph bounding box */}\n      <Rect x={0} y={0} width={width} height={height} color="cyan" />\n      <Paragraph paragraph={paragraph} x={0} y={0} width={200} />\n    </Canvas>\n  );\n};\n'})}),"\n",(0,a.jsx)("img",{src:n(1192).A,width:"256",height:"256"}),"\n",(0,a.jsx)(t.h2,{id:"fonts",children:"Fonts"}),"\n",(0,a.jsx)(t.p,{children:"By default, the paragraph API will use the system fonts.\nYou can also use custom fonts with this API as well."}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"useFonts"})," hooks allows you to load custom fonts to be used for your Skia drawing.\nThe font files should be organized by family names.\nFor example:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import {useFonts} from "@shopify/react-native-skia";\n\nconst fontMgr = useFonts({\n  Roboto: [\n    require("./Roboto-Medium.ttf"),\n    require("./Roboto-Regular.ttf"),\n    require("./Roboto-Bold.ttf"),\n  ],\n  Helvetica: [require("./Helvetica.ttf")],\n});\nif (!fontMgr) {\n  // Returns null until all fonts are loaded\n}\n// Now the fonts are available\n'})}),"\n",(0,a.jsxs)(t.p,{children:["You can also list the available system fonts via ",(0,a.jsx)(t.code,{children:"listFontFamilies()"})," function."]}),"\n",(0,a.jsx)(t.h2,{id:"styling-paragraphs",children:"Styling Paragraphs"}),"\n",(0,a.jsx)(t.p,{children:"These properties define the overall layout and behavior of a paragraph."}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Property"}),(0,a.jsx)(t.th,{children:"Description"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"disableHinting"})}),(0,a.jsx)(t.td,{children:"Controls whether text hinting is disabled."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"ellipsis"})}),(0,a.jsx)(t.td,{children:"Specifies the text to use for ellipsis when text overflows."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"heightMultiplier"})}),(0,a.jsx)(t.td,{children:"Sets the line height as a multiplier of the font size."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"maxLines"})}),(0,a.jsx)(t.td,{children:"Maximum number of lines for the paragraph."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"replaceTabCharacters"})}),(0,a.jsx)(t.td,{children:"Determines whether tab characters should be replaced with spaces."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"strutStyle"})}),(0,a.jsx)(t.td,{children:"Defines the strut style, which affects the minimum height of a line."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"textAlign"})}),(0,a.jsx)(t.td,{children:"Sets the alignment of text (left, right, center, justify, start, end)."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"textDirection"})}),(0,a.jsx)(t.td,{children:"Determines the text direction (RTL or LTR)."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"textHeightBehavior"})}),(0,a.jsx)(t.td,{children:"Controls the behavior of text ascent and descent in the first and last lines."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"textStyle"})}),(0,a.jsx)(t.td,{children:"Default text style for the paragraph (can be overridden by individual text styles)."})]})]})]}),"\n",(0,a.jsxs)(t.p,{children:["Below is an example to center text with ",(0,a.jsx)(t.code,{children:"textAlign"})," property:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import { useMemo } from "react";\nimport { Paragraph, Skia, TextAlign, Canvas, Rect } from "@shopify/react-native-skia";\n\nconst MyParagraph = () => {\n  const paragraph = useMemo(() => {\n    const para = Skia.ParagraphBuilder.Make({\n          textAlign: TextAlign.Center,\n      })\n      .addText("Say Hello to React Native Skia")\n      .build();\n    return para;\n  }, []);\n\n  // Render the paragraph with the text center\n  return (\n    <Canvas style={{ width: 256, height: 256 }}>\n      <Paragraph paragraph={paragraph} x={0} y={0} width={200} />\n    </Canvas>\n  );\n};\n'})}),"\n",(0,a.jsx)(t.h2,{id:"text-style-properties",children:"Text Style Properties"}),"\n",(0,a.jsx)(t.p,{children:"These properties are used to style specific segments of text within a paragraph."}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Property"}),(0,a.jsx)(t.th,{children:"Description"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"backgroundColor"})}),(0,a.jsx)(t.td,{children:"Background color of the text."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"color"})}),(0,a.jsx)(t.td,{children:"Color of the text."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"decoration"})}),(0,a.jsx)(t.td,{children:"Type of text decoration (underline, overline, line-through)."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"decorationColor"})}),(0,a.jsx)(t.td,{children:"Color of the text decoration."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"decorationThickness"})}),(0,a.jsx)(t.td,{children:"Thickness of the text decoration."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"decorationStyle"})}),(0,a.jsx)(t.td,{children:"Style of the text decoration (solid, double, dotted, dashed, wavy)."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"fontFamilies"})}),(0,a.jsx)(t.td,{children:"List of font families for the text."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"fontFeatures"})}),(0,a.jsx)(t.td,{children:"List of font features."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"fontSize"})}),(0,a.jsx)(t.td,{children:"Font size of the text."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"fontStyle"})}),(0,a.jsx)(t.td,{children:"Font style (weight, width, slant)."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"fontVariations"})}),(0,a.jsx)(t.td,{children:"Font variations."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"foregroundColor"})}),(0,a.jsx)(t.td,{children:"Foreground color (for effects like gradients)."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"heightMultiplier"})}),(0,a.jsx)(t.td,{children:"Multiplier for line height."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"halfLeading"})}),(0,a.jsx)(t.td,{children:"Controls half-leading value."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"letterSpacing"})}),(0,a.jsx)(t.td,{children:"Space between characters."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"locale"})}),(0,a.jsx)(t.td,{children:"Locale for the text (affects things like sorting)."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"shadows"})}),(0,a.jsx)(t.td,{children:"List of text shadows."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"textBaseline"})}),(0,a.jsx)(t.td,{children:"Baseline for the text (alphabetic, ideographic)."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"wordSpacing"})}),(0,a.jsx)(t.td,{children:"Space between words."})]})]})]}),"\n",(0,a.jsx)(t.p,{children:"These tables offer a quick reference to differentiate between paragraph and text styles in React Native Skia. You can use them to guide developers on how to apply various styles to create visually appealing and functional text layouts.\nBelow is an example using different font styling:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import { useMemo } from "react";\nimport { Paragraph, Skia, useFonts, FontStyle } from "@shopify/react-native-skia";\n\nconst MyParagraph = () => {\n  const customFontMgr = useFonts({\n    Roboto: [\n        require("path/to/Roboto-Italic.ttf"),\n        require("path/to/Roboto-Regular.ttf"),\n        require("path/to/Roboto-Bold.ttf")\n    ],\n  });\n\n  const paragraph = useMemo(() => {\n    // Are the custom fonts loaded?\n    if (!customFontMgr) {\n      return null;\n    }\n    const textStyle = {\n      fontSize: 24,\n      fontFamilies: ["Roboto"],\n      color: Skia.Color("#000"),\n    };\n\n    const paragraphBuilder = Skia.ParagraphBuilder.Make({}, customFontMgr);\n    paragraphBuilder\n      .pushStyle({ ...textStyle, fontStyle: FontStyle.Bold })\n      .addText("This text is bold\\n")\n      .pop()\n      .pushStyle({ ...textStyle, fontStyle: FontStyle.Normal })\n      .addText("This text is regular\\n")\n      .pop()\n      .pushStyle({ ...textStyle, fontStyle: FontStyle.Italic })\n      .addText("This text is italic")\n      .pop()\n      .build();\n    return paragraphBuilder.build();\n  }, [customFontMgr]);\n\n  return <Paragraph paragraph={paragraph} x={0} y={0} width={300} />;\n};\n'})}),"\n",(0,a.jsx)(t.h4,{id:"result-1",children:"Result"}),"\n",(0,a.jsx)("img",{src:n(5010).A,width:"256",height:"256"})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);