"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6027],{1184:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var i=r(4041);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},1455:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/opacity-beaac4eb7e3937ea390f7a384e86ec5d.png"},9838:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"paint/properties","title":"Painting Properties","description":"Below are the properties of a Paint component.","source":"@site/docs/paint/properties.md","sourceDirName":"paint","slug":"/paint/properties","permalink":"/react-native-skia/docs/paint/properties","draft":false,"unlisted":false,"editUrl":"https://github.com/shopify/react-native-skia/edit/main/docs/docs/paint/properties.md","tags":[],"version":"current","frontMatter":{"id":"properties","title":"Painting Properties","sidebar_label":"Properties","slug":"/paint/properties"},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/react-native-skia/docs/paint/overview"},"next":{"title":"Group","permalink":"/react-native-skia/docs/group"}}');var t=r(1085),s=r(1184);const o={id:"properties",title:"Painting Properties",sidebar_label:"Properties",slug:"/paint/properties"},c=void 0,l={},d=[{value:"color",id:"color",level:2},{value:"opacity",id:"opacity",level:2},{value:"blendMode",id:"blendmode",level:2},{value:"style",id:"style",level:2},{value:"strokeWidth",id:"strokewidth",level:2},{value:"strokeJoin",id:"strokejoin",level:2},{value:"strokeCap",id:"strokecap",level:2},{value:"strokeMiter",id:"strokemiter",level:2},{value:"antiAlias",id:"antialias",level:2},{value:"dither",id:"dither",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Below are the properties of a Paint component.\nThe following children can also be assigned to a Paint:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/shaders/overview",children:"Shaders"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/image-filters/overview",children:"Image Filters"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/color-filters",children:"Color Filters"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/mask-filters",children:"Mask Filters"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/path-effects",children:"Path Effects"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"color",children:"color"}),"\n",(0,t.jsxs)(n.p,{children:["Sets the alpha and RGB used when stroking and filling.\nThe color is a string or a number.\nAny valid ",(0,t.jsx)(n.a,{href:"https://www.w3.org/TR/css-color-3/",children:"CSS color"})," value is supported."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:"twoslash",children:'import {Group, Circle, vec} from "@shopify/react-native-skia";\n\n<>\n  <Group color="red">\n    <Circle c={vec(0, 0)} r={100} />\n  </Group>\n  {/* 0xffff0000 is also red (format is argb) */}\n  <Group color={0xffff0000}>\n    <Circle c={vec(0, 0)} r={50} />\n  </Group>\n  {/* Any CSS color is valid */}\n  <Group color="hsl(120, 100%, 50%)">\n    <Circle c={vec(0, 0)} r={50} />\n  </Group>\n</>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"opacity",children:"opacity"}),"\n",(0,t.jsx)(n.p,{children:"Replaces alpha, leaving RGBA unchanged. 0 means fully transparent, 1.0 means opaque.\nWhen setting opacity in a Group component, the alpha component of all descending colors will inherit that value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:"twoslash",children:'import {Canvas, Circle, Group, Paint, vec} from "@shopify/react-native-skia";\n\nconst width = 256;\nconst height = 256;\nconst strokeWidth = 30;\nconst r = width / 2 - strokeWidth / 2;\nconst c = vec(width / 2, height / 2);\n\nexport const OpacityDemo = () => {\n  return (\n    <Canvas style={{ width, height }}>\n      <Group opacity={0.5}>\n        <Circle c={c} r={r} color="red" />\n        <Circle\n          c={c}\n          r={r}\n          color="lightblue"\n          style="stroke"\n          strokeWidth={strokeWidth}\n        />\n        <Circle\n          c={c}\n          r={r}\n          color="mint"\n          style="stroke"\n          strokeWidth={strokeWidth / 2}\n        />\n      </Group>\n    </Canvas>\n  );\n};\n'})}),"\n",(0,t.jsx)("img",{alt:"Paint Opacity",src:r(1455).A,width:"256",height:"256"}),"\n",(0,t.jsx)(n.h2,{id:"blendmode",children:"blendMode"}),"\n",(0,t.jsxs)(n.p,{children:["Sets the blend mode that is, the mode used to combine source color with destination color.\nThe following values are available: ",(0,t.jsx)(n.code,{children:"clear"}),", ",(0,t.jsx)(n.code,{children:"src"}),", ",(0,t.jsx)(n.code,{children:"dst"}),", ",(0,t.jsx)(n.code,{children:"srcOver"}),", ",(0,t.jsx)(n.code,{children:"dstOver"}),", ",(0,t.jsx)(n.code,{children:"srcIn"}),", ",(0,t.jsx)(n.code,{children:"dstIn"}),", ",(0,t.jsx)(n.code,{children:"srcOut"}),", ",(0,t.jsx)(n.code,{children:"dstOut"}),",\n",(0,t.jsx)(n.code,{children:"srcATop"}),", ",(0,t.jsx)(n.code,{children:"dstATop"}),", ",(0,t.jsx)(n.code,{children:"xor"}),", ",(0,t.jsx)(n.code,{children:"plus"}),", ",(0,t.jsx)(n.code,{children:"modulate"}),", ",(0,t.jsx)(n.code,{children:"screen"}),", ",(0,t.jsx)(n.code,{children:"overlay"}),", ",(0,t.jsx)(n.code,{children:"darken"}),", ",(0,t.jsx)(n.code,{children:"lighten"}),", ",(0,t.jsx)(n.code,{children:"colorDodge"}),", ",(0,t.jsx)(n.code,{children:"colorBurn"}),", ",(0,t.jsx)(n.code,{children:"hardLight"}),",\n",(0,t.jsx)(n.code,{children:"softLight"}),", ",(0,t.jsx)(n.code,{children:"difference"}),", ",(0,t.jsx)(n.code,{children:"exclusion"}),", ",(0,t.jsx)(n.code,{children:"multiply"}),", ",(0,t.jsx)(n.code,{children:"hue"}),", ",(0,t.jsx)(n.code,{children:"saturation"}),", ",(0,t.jsx)(n.code,{children:"color"}),", ",(0,t.jsx)(n.code,{children:"luminosity"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"style",children:"style"}),"\n",(0,t.jsxs)(n.p,{children:["The paint style can be ",(0,t.jsx)(n.code,{children:"fill"})," (default) or ",(0,t.jsx)(n.code,{children:"stroke"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"strokewidth",children:"strokeWidth"}),"\n",(0,t.jsx)(n.p,{children:"Thickness of the pen used to outline the shape."}),"\n",(0,t.jsx)(n.h2,{id:"strokejoin",children:"strokeJoin"}),"\n",(0,t.jsxs)(n.p,{children:["Sets the geometry drawn at the corners of strokes.\nValues can be ",(0,t.jsx)(n.code,{children:"bevel"}),", ",(0,t.jsx)(n.code,{children:"miter"}),", or ",(0,t.jsx)(n.code,{children:"round"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"strokecap",children:"strokeCap"}),"\n",(0,t.jsxs)(n.p,{children:["Returns the geometry drawn at the beginning and end of strokes.\nValues can be ",(0,t.jsx)(n.code,{children:"butt"}),", ",(0,t.jsx)(n.code,{children:"round"}),", or ",(0,t.jsx)(n.code,{children:"square"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"strokemiter",children:"strokeMiter"}),"\n",(0,t.jsx)(n.p,{children:"Limit at which a sharp corner is drawn beveled."}),"\n",(0,t.jsx)(n.h2,{id:"antialias",children:"antiAlias"}),"\n",(0,t.jsx)(n.p,{children:"Requests, but does not require, that edge pixels draw opaque or with partial transparency."}),"\n",(0,t.jsx)(n.h2,{id:"dither",children:"dither"}),"\n",(0,t.jsx)(n.p,{children:"Requests, but does not require, to distribute color error."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);