"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3842],{1184:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>l});var n=s(4041);const i={},c=n.createContext(i);function r(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(c.Provider,{value:t},e.children)}},3388:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/example1-ca1e043a2a9ceae4d337608408ca024c.png"},4855:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"shapes/patch","title":"Patch","description":"Draws a Coons patch.","source":"@site/docs/shapes/patch.md","sourceDirName":"shapes","slug":"/shapes/patch","permalink":"/react-native-skia/docs/shapes/patch","draft":false,"unlisted":false,"editUrl":"https://github.com/shopify/react-native-skia/edit/main/docs/docs/shapes/patch.md","tags":[],"version":"current","frontMatter":{"id":"patch","title":"Patch","sidebar_label":"Patch","slug":"/shapes/patch"},"sidebar":"tutorialSidebar","previous":{"title":"Vertices","permalink":"/react-native-skia/docs/shapes/vertices"},"next":{"title":"Pictures","permalink":"/react-native-skia/docs/shapes/pictures"}}');var i=s(1085),c=s(1184);const r={id:"patch",title:"Patch",sidebar_label:"Patch",slug:"/shapes/patch"},l=void 0,a={},o=[{value:"Example",id:"example",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Draws a ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Coons_patch",children:"Coons patch"}),"."]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"cubics"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"CubicBezier[4]"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Specifies four cubic Bezier starting at the top-left corner, in clockwise order, sharing every fourth point. The last cubic Bezier ends at the first point."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"textures"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"Point[]"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Texture_mapping",children:"Texture mapping"}),". The texture is the shader provided by the paint"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"colors?"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"string[]"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Optional colors to be associated to each corner"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"blendMode?"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"BlendMode"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["If ",(0,i.jsx)(t.code,{children:"colors"})," is provided, colors are blended with the paint using the blend mode. Default is ",(0,i.jsx)(t.code,{children:"dstOver"})," if colors are provided, ",(0,i.jsx)(t.code,{children:"srcOver"})," if not"]})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import {Canvas, Patch, vec} from "@shopify/react-native-skia";\n\nconst PatchDemo = () => {\n  const colors = ["#61dafb", "#fb61da", "#61fbcf", "#dafb61"];\n  const C = 64;\n  const width = 256;\n  const topLeft = { pos: vec(0, 0), c1: vec(0, C), c2: vec(C, 0) };\n  const topRight = {\n    pos: vec(width, 0),\n    c1: vec(width, C),\n    c2: vec(width + C, 0),\n  };\n  const bottomRight = {\n    pos: vec(width, width),\n    c1: vec(width, width - 2 * C),\n    c2: vec(width - 2 * C, width),\n  };\n  const bottomLeft = {\n    pos: vec(0, width),\n    c1: vec(0, width - 2 * C),\n    c2: vec(-2 * C, width),\n  };\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Patch\n        colors={colors}\n        patch={[topLeft, topRight, bottomRight, bottomLeft]}\n      />\n    </Canvas>\n  );\n};\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"SVG Notation",src:s(3388).A+"",width:"256",height:"256"})})]})}function h(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);