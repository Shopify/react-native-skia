"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7977],{1184:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(4041);const s={},l=o.createContext(s);function i(e){const t=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(l.Provider,{value:t},e.children)}},3582:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/hello-world-5176779199f0cf381b67a9ed3f8672af.png"},8454:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"text/text","title":"Text","description":"The text component can be used to draw a simple text.","source":"@site/docs/text/text.md","sourceDirName":"text","slug":"/text/text","permalink":"/react-native-skia/docs/text/text","draft":false,"unlisted":false,"editUrl":"https://github.com/shopify/react-native-skia/edit/main/docs/docs/text/text.md","tags":[],"version":"current","frontMatter":{"id":"text","title":"Text","sidebar_label":"Text","slug":"/text/text"},"sidebar":"tutorialSidebar","previous":{"title":"Paragraph","permalink":"/react-native-skia/docs/text/paragraph"},"next":{"title":"Glyphs","permalink":"/react-native-skia/docs/text/glyphs"}}');var s=n(1085),l=n(1184);const i={id:"text",title:"Text",sidebar_label:"Text",slug:"/text/text"},a=void 0,r={},c=[{value:"Simple Text",id:"simple-text",level:3},{value:"Fonts",id:"fonts",level:2},{value:"System Fonts",id:"system-fonts",level:2},{value:"Low-level API",id:"low-level-api",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"The text component can be used to draw a simple text.\nPlease note that the y origin of the Text is the bottom of the text, not the top."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"text"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"string"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Text to draw"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"font"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"SkFont"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Font to use"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"x"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"number"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Left position of the text (default is 0)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"y"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"number"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Bottom position the text (default is 0, the )"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"simple-text",children:"Simple Text"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import {Canvas, Text, useFont, Fill} from "@shopify/react-native-skia";\n\nexport const HelloWorld = () => {\n  const fontSize = 32;\n  const font = useFont(require("./my-font.ttf"), fontSize);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Fill color="white" />\n      <Text\n        x={0}\n        y={fontSize}\n        text="Hello World"\n        font={font}\n      />\n    </Canvas>\n  );\n};\n'})}),"\n",(0,s.jsx)("img",{src:n(3582).A,width:"256",height:"256"}),"\n",(0,s.jsx)(t.h2,{id:"fonts",children:"Fonts"}),"\n",(0,s.jsxs)(t.p,{children:["Once the fonts are loaded, we provide a ",(0,s.jsx)(t.code,{children:"matchFont"})," function that given a font style will return a font object that you can use directly."]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["For font matching we recommend using the ",(0,s.jsx)(t.a,{href:"/docs/text/paragraph/",children:"Paragraph API"})," instead.\nThe APIs belows were made available before the Paragraph API was released."]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import {useFonts, Text, matchFont} from "@shopify/react-native-skia";\n\nconst Demo = () => {\n  const fontMgr = useFonts({\n    Roboto: [\n      require("./Roboto-Medium.ttf"),\n      require("./Roboto-Regular.ttf"),\n      require("./Roboto-Bold.ttf"),\n    ]\n  });\n  if (!fontMgr) {\n    return null;\n  }\n  const fontStyle = {\n    fontFamily: "Roboto",\n    fontWeight: "bold",\n    fontSize: 16\n  } as const;\n  const font = matchFont(fontStyle, fontMgr);\n  return (\n    <Text text="Hello World" y={32} x={32} font={font} />\n  );\n};\n'})}),"\n",(0,s.jsx)(t.h2,{id:"system-fonts",children:"System Fonts"}),"\n",(0,s.jsxs)(t.p,{children:["System fonts are available via ",(0,s.jsx)(t.code,{children:"Skia.FontMgr.System()"}),".\nYou can list system fonts via  ",(0,s.jsx)(t.code,{children:"listFontFamilies"})," function returns the list of available system font families.\nBy default the function will list system fonts but you can pass an optional ",(0,s.jsx)(t.code,{children:"fontMgr"})," object as parameter."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",metastring:"twoslash",children:'import {listFontFamilies} from "@shopify/react-native-skia";\n\nconsole.log(listFontFamilies());\n'})}),"\n",(0,s.jsx)(t.p,{children:"Output example on Android:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'["sans-serif", "arial", "helvetica", "tahoma", "verdana", ...]\n'})}),"\n",(0,s.jsx)(t.p,{children:"or on iOS:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'["Academy Engraved LET", "Al Nile", "American Typewriter", "Apple Color Emoji", ...]\n'})}),"\n",(0,s.jsx)(t.p,{children:"By default matchFont, will match fonts from the system font manager:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",metastring:"twoslash",children:'import {Platform} from "react-native";\nimport {Canvas, Text, matchFont, Fill, Skia} from "@shopify/react-native-skia";\n \nconst fontFamily = Platform.select({ ios: "Helvetica", default: "serif" });\nconst fontStyle = {\n  fontFamily,\n  fontSize: 14,\n  fontStyle: "italic",\n  fontWeight: "bold",\n};\nconst font = matchFont(fontStyle);\n\nexport const HelloWorld = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Fill color="white" />\n      <Text\n        x={0}\n        y={fontStyle.fontSize}\n        text="Hello World"\n        font={font}\n      />\n    </Canvas>\n  );\n};\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"fontStyle"})," object can have the following list of optional attributes:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"fontFamily"}),": The name of the font family."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"fontSize"}),": The size of the font."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"fontStyle"}),": The slant of the font. Can be ",(0,s.jsx)(t.code,{children:"normal"}),", ",(0,s.jsx)(t.code,{children:"italic"}),", or ",(0,s.jsx)(t.code,{children:"oblique"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"fontWeight"}),": The weight of the font. Can be ",(0,s.jsx)(t.code,{children:"normal"}),", ",(0,s.jsx)(t.code,{children:"bold"}),", or any of ",(0,s.jsx)(t.code,{children:"100"}),", ",(0,s.jsx)(t.code,{children:"200"}),", ",(0,s.jsx)(t.code,{children:"300"}),", ",(0,s.jsx)(t.code,{children:"400"}),", ",(0,s.jsx)(t.code,{children:"500"}),", ",(0,s.jsx)(t.code,{children:"600"}),", ",(0,s.jsx)(t.code,{children:"700"}),", ",(0,s.jsx)(t.code,{children:"800"}),", ",(0,s.jsx)(t.code,{children:"900"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["By default, ",(0,s.jsx)(t.code,{children:"matchFont"})," uses the system font manager to match the font style. However, if you want to use your custom font manager, you can pass it as the second parameter to the ",(0,s.jsx)(t.code,{children:"matchFont"})," function:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",metastring:"twoslash",children:'import {matchFont, useFonts} from "@shopify/react-native-skia";\n\nconst fontMgr = useFonts({\n  Roboto: [\n    require("../../Tests/assets/Roboto-Medium.ttf"),\n    require("../../Tests/assets/Roboto-Bold.ttf"),\n  ]\n});\n\nconst font = matchFont(fontStyle, fontMgr);\n'})}),"\n",(0,s.jsx)(t.h2,{id:"low-level-api",children:"Low-level API"}),"\n",(0,s.jsxs)(t.p,{children:["The basic usage of the system font manager is as follows.\nThese are the APIs used behind the scene by the ",(0,s.jsx)(t.code,{children:"matchFont"})," function."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import {Platform} from "react-native";\nimport {Skia, FontStyle} from "@shopify/react-native-skia";\n \nconst familyName = Platform.select({ ios: "Helvetica", default: "serif" });\nconst fontSize = 32;\n// Get the system font manager\nconst fontMgr = Skia.FontMgr.System();\n// The custom font manager is available via Skia.TypefaceFontProvider.Make()\nconst customFontMgr = Skia.TypefaceFontProvider.Make();\n// typeface needs to be loaded via Skia.Data and instanciated via\n// Skia.Typeface.MakeFreeTypeFaceFromData()\n// customFontMgr.registerTypeface(customTypeFace, "Roboto");\n\n// Matching a font\nconst typeface =  fontMgr.matchFamilyStyle(familyName, FontStyle.Bold);\nconst font = Skia.Font(typeface, fontSize);\n'})})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);