"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5953],{1184:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(4041);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}},2588:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/opacity-tiger-420bb9c319ebc8ef00722c01fbc088c8.png"},5818:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"image-svg","title":"SVG Images","description":"Draw an SVG (see SVG Support).","source":"@site/docs/image-svg.md","sourceDirName":".","slug":"/images-svg","permalink":"/react-native-skia/docs/images-svg","draft":false,"unlisted":false,"editUrl":"https://github.com/shopify/react-native-skia/edit/main/docs/docs/image-svg.md","tags":[],"version":"current","frontMatter":{"id":"image-svg","title":"SVG Images","sidebar_label":"SVG","slug":"/images-svg"},"sidebar":"tutorialSidebar","previous":{"title":"Animated Images","permalink":"/react-native-skia/docs/animated-images"},"next":{"title":"Snapshot Views","permalink":"/react-native-skia/docs/snapshotviews"}}');var i=t(1085),r=t(1184);const l={id:"image-svg",title:"SVG Images",sidebar_label:"SVG",slug:"/images-svg"},a=void 0,o={},c=[{value:"Example",id:"example",level:3},{value:"Scaling the SVG",id:"scaling-the-svg",level:2},{value:"Example",id:"example-1",level:3},{value:"Applying Effects",id:"applying-effects",level:2},{value:"Opacity Example",id:"opacity-example",level:3},{value:"Blur Example",id:"blur-example",level:3},{value:"Result",id:"result",level:3},{value:"SVG Support",id:"svg-support",level:2},{value:"Text",id:"text",level:3},{value:"CSS Styles",id:"css-styles",level:3},{value:"RGBA Colors",id:"rgba-colors",level:3},{value:"Non Supported Elements",id:"non-supported-elements",level:3},{value:"Font Family",id:"font-family",level:3},{value:"Inlined SVGs",id:"inlined-svgs",level:3},{value:"Gradient Templates",id:"gradient-templates",level:3},{value:"Fallbacks",id:"fallbacks",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Draw an SVG (see ",(0,i.jsx)(n.a,{href:"#svg-support",children:"SVG Support"}),")."]}),"\n",(0,i.jsx)(n.p,{children:"If the root dimensions are in absolute units, the width/height properties have no effect since the initial viewport is fixed."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"svg"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"SVG"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"SVG Image."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"width?"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Width of the destination image. This is used to resolve the initial viewport when the root SVG width is specified in relative units."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"height?"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Height of the destination image. This is used to resolve the initial viewport when the root SVG height is specified in relative units."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"x?"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Optional displayed x coordinate of the svg container."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"y?"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Optional displayed y coordinate of the svg container."})]})]})]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ImageSVG"})," component doesn't follow the same painting rules as other components.\n",(0,i.jsx)(n.a,{href:"#applying-effects",children:"see applying effects"}),"."]}),(0,i.jsxs)(n.p,{children:["On Web, the Current Transformation Matrix (CTM) won't be applied to ",(0,i.jsx)(n.code,{children:"ImageSVG"})," because the component relies on browser SVG rendering instead of CanvasKit. The SVG is rendered as a hidden image element and then imported as image data. This means transformations need to be prepared beforehand or applied through the ",(0,i.jsx)(n.code,{children:"Group"})," component with explicit transform matrices."]})]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:"twoslash",children:'import {\n  Canvas,\n  ImageSVG,\n  useSVG\n} from "@shopify/react-native-skia";\n\nconst ImageSVGDemo = () => {\n  // Alternatively, you can pass an SVG URL directly\n  // for instance: const svg = useSVG("https://upload.wikimedia.org/wikipedia/commons/f/fd/Ghostscript_Tiger.svg");\n  const svg = useSVG(require("../../assets/tiger.svg"));\n  return (\n    <Canvas style={{ flex: 1 }}>\n      { svg && (\n        <ImageSVG\n          svg={svg}\n          width={256}\n          height={256}\n        />)\n      }\n    </Canvas>\n  );\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can also use an inlined string as SVG (using ",(0,i.jsx)(n.code,{children:"Skia.SVG.MakeFromString"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:"twoslash",children:"import React from \"react\";\nimport { Canvas, ImageSVG, Skia } from \"@shopify/react-native-skia\";\n\nconst svg = Skia.SVG.MakeFromString(\n  `<svg viewBox='0 0 290 500' xmlns='http://www.w3.org/2000/svg'>\n    <circle cx='31' cy='325' r='120px' fill='#c02aaa'/>\n  </svg>`\n)!;\n\nexport const SVG = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <ImageSVG\n        svg={svg}\n        x={0}\n        y={0}\n        width={290}\n        height={500}\n      />\n    </Canvas>\n  );\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"scaling-the-svg",children:"Scaling the SVG"}),"\n",(0,i.jsx)(n.p,{children:"As mentionned above, if the root dimensions are in absolute units, the width/height properties have no effect since the initial viewport is fixed. However you can access these values and use the fitbox function."}),"\n",(0,i.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"In the example below we scale the SVG to the canvas width and height."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:"twoslash",children:"import React from \"react\";\nimport { Canvas, ImageSVG, Skia, rect, fitbox, Group } from \"@shopify/react-native-skia\";\n\nconst svg = Skia.SVG.MakeFromString(\n  `<svg viewBox='0 0 20 20' width=\"20\" height=\"20\" xmlns='http://www.w3.org/2000/svg'>\n    <circle cx='10' cy='10' r='10' fill='#00ffff'/>\n  </svg>`\n)!;\n\nconst width = 256;\nconst height = 256;\nconst src = rect(0, 0, svg.width(), svg.height());\nconst dst = rect(0, 0, width, height);\n\nexport const SVG = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n    <Group transform={fitbox(\"contain\", src, dst)}>\n      <ImageSVG svg={svg} x={0} y={0} width={20} height={20} />\n      </Group>\n    </Canvas>\n  );\n};\n"})}),"\n",(0,i.jsx)("img",{src:t(6027).A,width:"256",height:"256"}),"\n",(0,i.jsx)(n.h2,{id:"applying-effects",children:"Applying Effects"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ImageSVG"})," component doesn't follow the same painting rules as other components.\nThis is because behind the scene, we use the SVG module from Skia.\nHowever you can apply effets using the ",(0,i.jsx)(n.code,{children:"layer"})," property."]}),"\n",(0,i.jsx)(n.h3,{id:"opacity-example",children:"Opacity Example"}),"\n",(0,i.jsxs)(n.p,{children:["In the example below we apply an opacity effect via the ",(0,i.jsx)(n.code,{children:"ColorMatrix"})," component."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:"twoslash",children:'import React from "react";\nimport { Canvas, ImageSVG, Skia, rect, fitbox, useSVG, Group, Paint, OpacityMatrix, ColorMatrix } from "@shopify/react-native-skia";\n\nconst width = 256;\nconst height = 256;\n\nexport const SVG = () => {\n  const tiger = useSVG(require("./tiger.svg"));\n  if (!tiger) {\n    return null;\n  }\n  const src = rect(0, 0, tiger.width(), tiger.height());\n  const dst = rect(0, 0, width, height);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group\n        transform={fitbox("contain", src, dst)}\n        layer={<Paint><ColorMatrix matrix={OpacityMatrix(0.5)} /></Paint>}\n      >\n        <ImageSVG svg={tiger} x={0} y={0} width={800} height={800} />\n      </Group>\n    </Canvas>\n  );\n};\n'})}),"\n",(0,i.jsx)("img",{src:t(2588).A,width:"256",height:"256"}),"\n",(0,i.jsx)(n.h3,{id:"blur-example",children:"Blur Example"}),"\n",(0,i.jsx)(n.p,{children:"In the example below we apply a blur image filter to the SVG."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:"twoslash",children:'import React from "react";\nimport { Canvas, ImageSVG, Skia, rect, fitbox, useSVG, Group, Paint, Blur } from "@shopify/react-native-skia";\n\nconst width = 256;\nconst height = 256;\n\nexport const SVG = () => {\n  const tiger = useSVG(require("./tiger.svg"));\n  if (!tiger) {\n    return null;\n  }\n  const src = rect(0, 0, tiger.width(), tiger.height());\n  const dst = rect(0, 0, width, height);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group transform={fitbox("contain", src, dst)} layer={<Paint><Blur blur={10} /></Paint>}>\n        <ImageSVG svg={tiger} x={0} y={0} width={800} height={800} />\n      </Group>\n    </Canvas>\n  );\n};\n'})}),"\n",(0,i.jsx)(n.h3,{id:"result",children:"Result"}),"\n",(0,i.jsx)("img",{src:t(6739).A,width:"256",height:"256"}),"\n",(0,i.jsx)(n.h2,{id:"svg-support",children:"SVG Support"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://github.com/google/skia/tree/main/modules/svg",children:"SVG module from Skia"})," displays SVGs as images.\nWe expect most SVG files to render correctly out of the box, especially if they come from Figma or Illustrator.\nHowever, please be aware of some of the quirks below when using it.\nText elements current won't render and any external XML elements such as XLink or CSS won't render.\nIf your SVG doesn't render correctly and you've considered all the items below, please file ",(0,i.jsx)(n.a,{href:"https://github.com/Shopify/react-native-skia/issues/new",children:"an issue"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"text",children:"Text"}),"\n",(0,i.jsx)(n.p,{children:"Currently text rendering is not supported"}),"\n",(0,i.jsx)(n.h3,{id:"css-styles",children:"CSS Styles"}),"\n",(0,i.jsxs)(n.p,{children:["CSS styles included in SVG are not supported.\nA tool like ",(0,i.jsx)(n.a,{href:"#using-svgo",children:"SVGO"})," can help with converting CSS style attributes to SVG attributes if possible.\nYou can use it online ",(0,i.jsx)(n.a,{href:"https://jakearchibald.github.io/svgomg/",children:"here"}),".\nFor instance, it can normalize CSS style attributes that contain transformations to the proper ",(0,i.jsx)(n.code,{children:"transform"})," property."]}),"\n",(0,i.jsx)(n.h3,{id:"rgba-colors",children:"RGBA Colors"}),"\n",(0,i.jsxs)(n.p,{children:["The RGBA color syntax is not supported. Instead, it would help if you used the ",(0,i.jsx)(n.code,{children:"fill-opacity"})," and ",(0,i.jsx)(n.code,{children:"stroke-opacity"})," attributes. Consider the example below."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<circle\n  r="10"\n  cx="10"\n  cy="10"\n  fill="rgba(100, 200, 300, 0.5)"\n  stroke="rgba(100, 200, 300, 0.8)"\n/>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Would need to be rewritten as:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<circle\n  r="10"\n  cx="10"\n  cy="10"\n  fill="rgb(100, 200, 300)"\n  fill-opacity="0.5"\n  stroke="rgb(100, 200, 300)"\n  stroke-opacity="0.8"\n/>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"opacity"})," attribute also applies to both the ",(0,i.jsx)(n.code,{children:"fill"})," and ",(0,i.jsx)(n.code,{children:"stroke"})," attributes."]}),"\n",(0,i.jsx)(n.h3,{id:"non-supported-elements",children:"Non Supported Elements"}),"\n",(0,i.jsx)(n.p,{children:"Below is the list of non-supported element. Often these SVGs can be rewritten to not use these elements."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<altGlyph>"})," (deprecated)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"<animate>"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<cursor>"})," (deprecated)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"<feComponentTransfer>"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"<feConvolveMatrix>"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"<feTile>"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"<feDropShadow>"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<font>"})," (deprecated)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"<foreignObject>"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<glyph>"})," (deprecated)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"<script>"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"<view>"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"font-family",children:"Font Family"}),"\n",(0,i.jsxs)(n.p,{children:["When rendering your SVG with Skia, all fonts available in your app are also available to your SVG.\nHowever, the way you can set the ",(0,i.jsx)(n.code,{children:"font-family"})," attribute is as flexible as on the web."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'// \u2705 This is really all that is supported:\n<text font-family="MyFont" />\n// \u274c This won\'t work. If MyFont is available, this syntax will be accepted.\n// but it will never fallback to monospace\n<text font-family="MyFont, monospace" />\n// \u274c The single quote syntax won\'t work either.\n<text font-family="\'MyFont\'" />\n'})}),"\n",(0,i.jsx)(n.h3,{id:"inlined-svgs",children:"Inlined SVGs"}),"\n",(0,i.jsxs)(n.p,{children:["Some SVGs contain inlined SVGs via the ",(0,i.jsx)(n.code,{children:"<image>"})," or ",(0,i.jsx)(n.code,{children:"<feImage>"})," elements. This is not supported."]}),"\n",(0,i.jsx)(n.h3,{id:"gradient-templates",children:"Gradient Templates"}),"\n",(0,i.jsxs)(n.p,{children:["The deprecated ",(0,i.jsx)(n.code,{children:"xlink:href"})," attribute is not supported in gradients.\nYou can use the ",(0,i.jsx)(n.code,{children:"href"})," attribute instead.\nHowever, we found that it doesn't appear to be adequately supported.\nWe would recommend avoiding using it."]}),"\n",(0,i.jsx)(n.h3,{id:"fallbacks",children:"Fallbacks"}),"\n",(0,i.jsx)(n.p,{children:"Some SVG with issues display nicely in the browser because they are very tolerant of errors. We found that the Skia SVG module is much less forgiving."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},6027:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/svg-b12dc1a62035d322e61f87788779c4ad.png"},6739:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/blurred-tiger-3c30cf79f53128dfa15fff8e401cb369.png"}}]);