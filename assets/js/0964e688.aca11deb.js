"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9233],{1184:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(4041);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}},8424:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"animations/animations","title":"Animations","description":"React Native Skia offers integration with Reanimated v3 and above, enabling the execution of animations on the UI thread.","source":"@site/docs/animations/reanimated3.md","sourceDirName":"animations","slug":"/animations/animations","permalink":"/react-native-skia/docs/animations/animations","draft":false,"unlisted":false,"editUrl":"https://github.com/shopify/react-native-skia/edit/main/docs/docs/animations/reanimated3.md","tags":[],"version":"current","frontMatter":{"id":"animations","title":"Animations","sidebar_label":"Animations","slug":"/animations/animations"},"sidebar":"tutorialSidebar","previous":{"title":"Path Effects","permalink":"/react-native-skia/docs/path-effects"},"next":{"title":"Gestures","permalink":"/react-native-skia/docs/animations/gestures"}}');var i=t(1085),o=t(1184);const s={id:"animations",title:"Animations",sidebar_label:"Animations",slug:"/animations/animations"},r=void 0,c={},l=[{value:"Colors",id:"colors",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["React Native Skia offers integration with ",(0,i.jsx)(n.a,{href:"https://docs.swmansion.com/react-native-reanimated/",children:"Reanimated v3 and above"}),", enabling the execution of animations on the UI thread."]}),"\n",(0,i.jsxs)(n.p,{children:["React Native Skia supports the direct usage of Reanimated's shared and derived values as properties. There is no need for functions like ",(0,i.jsx)(n.code,{children:"createAnimatedComponent"})," or ",(0,i.jsx)(n.code,{children:"useAnimatedProps"}),"; simply pass the Reanimated values directly as properties."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:"twoslash",children:'import {useEffect} from "react";\nimport {Canvas, Circle, Group} from "@shopify/react-native-skia";\nimport {\n  useDerivedValue,\n  useSharedValue,\n  withRepeat,\n  withTiming,\n} from "react-native-reanimated";\n\nexport const HelloWorld = () => {\n  const size = 256;\n  const r = useSharedValue(0);\n  const c = useDerivedValue(() => size - r.value);\n  useEffect(() => {\n    r.value = withRepeat(withTiming(size * 0.33, { duration: 1000 }), -1);\n  }, [r, size]);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group blendMode="multiply">\n        <Circle cx={r} cy={r} r={r} color="cyan" />\n        <Circle cx={c} cy={r} r={r} color="magenta" />\n        <Circle\n          cx={size/2}\n          cy={c}\n          r={r}\n          color="yellow"\n        />\n      </Group>\n    </Canvas>\n  );\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["We offer some ",(0,i.jsx)(n.a,{href:"/docs/animations/hooks",children:"Skia specific animation hooks"}),", especially for paths."]}),"\n",(0,i.jsx)(n.h2,{id:"colors",children:"Colors"}),"\n",(0,i.jsxs)(n.p,{children:["For colors, React Native Skia uses a different storage format from Reanimated.\nThis means that ",(0,i.jsx)(n.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolateColor/",children:(0,i.jsx)(n.code,{children:"interpolateColor"})})," from Reanimated won't work out of the box.\nInstead you can use ",(0,i.jsx)(n.code,{children:"interpolateColors"})," from React Native Skia."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:"twoslash",children:'import {\n  Canvas,\n  LinearGradient,\n  Fill,\n  // Use this function instead of interpolateColor from Reanimated\n  interpolateColors,\n  vec,\n} from "@shopify/react-native-skia";\nimport { useEffect } from "react";\nimport { useWindowDimensions } from "react-native";\nimport {\n  useDerivedValue,\n  useSharedValue,\n  withRepeat,\n  withTiming,\n} from "react-native-reanimated";\n\nconst startColors = [\n  "rgba(34, 193, 195, 0.4)",\n  "rgba(34,193,195,0.4)",\n  "rgba(63,94,251,1)",\n  "rgba(253,29,29,0.4)",\n];\nconst endColors = [\n  "rgba(0,212,255,0.4)",\n  "rgba(253,187,45,0.4)",\n  "rgba(252,70,107,1)",\n  "rgba(252,176,69,0.4)",\n];\n\nexport const AnimatedGradient = () => {\n  const { width, height } = useWindowDimensions();\n  const colorsIndex = useSharedValue(0);\n  useEffect(() => {\n    colorsIndex.value = withRepeat(\n      withTiming(startColors.length - 1, {\n        duration: 4000,\n      }),\n      -1,\n      true\n    );\n  }, []);\n  const gradientColors = useDerivedValue(() => {\n    return [\n      interpolateColors(colorsIndex.value, [0, 1, 2, 3], startColors),\n      interpolateColors(colorsIndex.value, [0, 1, 2, 3], endColors),\n    ];\n  });\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Fill>\n        <LinearGradient\n          start={vec(0, 0)}\n          end={vec(width, height)}\n          colors={gradientColors}\n        />\n      </Fill>\n    </Canvas>\n  );\n};\n'})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);